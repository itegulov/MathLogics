package rules;

import proof.LogicalProof;
import structure.Expression;
import structure.logic.*;
import structure.predicate.*;

public class ForAllRule {
    public static void addForAllProof(Expression alpha, Expression e, Expression e1, Term variable, LogicalProof proof) {
        proof.addExpression(new Entailment(new And(alpha, e), alpha), null);
        proof.addExpression(new Entailment(new Entailment(new And(alpha, e), alpha), new Entailment(new Entailment(alpha, new Entailment(e, e1)), new Entailment(new And(alpha, e), alpha))), null);
        proof.addExpression(new Entailment(new Entailment(alpha, new Entailment(e, e1)), new Entailment(new And(alpha, e), alpha)), null);
        proof.addExpression(new Entailment(new Entailment(new And(alpha, e), alpha), new Entailment(new And(alpha, e), new Entailment(new And(alpha, e), alpha))), null);
        proof.addExpression(new Entailment(new Entailment(new Entailment(new And(alpha, e), alpha), new Entailment(new And(alpha, e), new Entailment(new And(alpha, e), alpha))), new Entailment(new Entailment(alpha, new Entailment(e, e1)), new Entailment(new Entailment(new And(alpha, e), alpha), new Entailment(new And(alpha, e), new Entailment(new And(alpha, e), alpha))))), null);
        proof.addExpression(new Entailment(new Entailment(alpha, new Entailment(e, e1)), new Entailment(new Entailment(new And(alpha, e), alpha), new Entailment(new And(alpha, e), new Entailment(new And(alpha, e), alpha)))), null);
        proof.addExpression(new Entailment(new Entailment(new Entailment(alpha, new Entailment(e, e1)), new Entailment(new And(alpha, e), alpha)), new Entailment(new Entailment(new Entailment(alpha, new Entailment(e, e1)), new Entailment(new Entailment(new And(alpha, e), alpha), new Entailment(new And(alpha, e), new Entailment(new And(alpha, e), alpha)))), new Entailment(new Entailment(alpha, new Entailment(e, e1)), new Entailment(new And(alpha, e), new Entailment(new And(alpha, e), alpha))))), null);
        proof.addExpression(new Entailment(new Entailment(new Entailment(alpha, new Entailment(e, e1)), new Entailment(new Entailment(new And(alpha, e), alpha), new Entailment(new And(alpha, e), new Entailment(new And(alpha, e), alpha)))), new Entailment(new Entailment(alpha, new Entailment(e, e1)), new Entailment(new And(alpha, e), new Entailment(new And(alpha, e), alpha)))), null);
        proof.addExpression(new Entailment(new Entailment(alpha, new Entailment(e, e1)), new Entailment(new And(alpha, e), new Entailment(new And(alpha, e), alpha))), null);
        proof.addExpression(new Entailment(new And(alpha, e), e), null);
        proof.addExpression(new Entailment(new Entailment(new And(alpha, e), e), new Entailment(new Entailment(alpha, new Entailment(e, e1)), new Entailment(new And(alpha, e), e))), null);
        proof.addExpression(new Entailment(new Entailment(alpha, new Entailment(e, e1)), new Entailment(new And(alpha, e), e)), null);
        proof.addExpression(new Entailment(new Entailment(new And(alpha, e), e), new Entailment(new And(alpha, e), new Entailment(new And(alpha, e), e))), null);
        proof.addExpression(new Entailment(new Entailment(new Entailment(new And(alpha, e), e), new Entailment(new And(alpha, e), new Entailment(new And(alpha, e), e))), new Entailment(new Entailment(alpha, new Entailment(e, e1)), new Entailment(new Entailment(new And(alpha, e), e), new Entailment(new And(alpha, e), new Entailment(new And(alpha, e), e))))), null);
        proof.addExpression(new Entailment(new Entailment(alpha, new Entailment(e, e1)), new Entailment(new Entailment(new And(alpha, e), e), new Entailment(new And(alpha, e), new Entailment(new And(alpha, e), e)))), null);
        proof.addExpression(new Entailment(new Entailment(new Entailment(alpha, new Entailment(e, e1)), new Entailment(new And(alpha, e), e)), new Entailment(new Entailment(new Entailment(alpha, new Entailment(e, e1)), new Entailment(new Entailment(new And(alpha, e), e), new Entailment(new And(alpha, e), new Entailment(new And(alpha, e), e)))), new Entailment(new Entailment(alpha, new Entailment(e, e1)), new Entailment(new And(alpha, e), new Entailment(new And(alpha, e), e))))), null);
        proof.addExpression(new Entailment(new Entailment(new Entailment(alpha, new Entailment(e, e1)), new Entailment(new Entailment(new And(alpha, e), e), new Entailment(new And(alpha, e), new Entailment(new And(alpha, e), e)))), new Entailment(new Entailment(alpha, new Entailment(e, e1)), new Entailment(new And(alpha, e), new Entailment(new And(alpha, e), e)))), null);
        proof.addExpression(new Entailment(new Entailment(alpha, new Entailment(e, e1)), new Entailment(new And(alpha, e), new Entailment(new And(alpha, e), e))), null);
        proof.addExpression(new Entailment(new And(alpha, e), new Entailment(new And(alpha, e), new And(alpha, e))), null);
        proof.addExpression(new Entailment(new Entailment(new And(alpha, e), new Entailment(new And(alpha, e), new And(alpha, e))), new Entailment(new Entailment(alpha, new Entailment(e, e1)), new Entailment(new And(alpha, e), new Entailment(new And(alpha, e), new And(alpha, e))))), null);
        proof.addExpression(new Entailment(new Entailment(alpha, new Entailment(e, e1)), new Entailment(new And(alpha, e), new Entailment(new And(alpha, e), new And(alpha, e)))), null);
        proof.addExpression(new Entailment(new And(alpha, e), new Entailment(new Entailment(new And(alpha, e), new And(alpha, e)), new And(alpha, e))), null);
        proof.addExpression(new Entailment(new Entailment(new And(alpha, e), new Entailment(new Entailment(new And(alpha, e), new And(alpha, e)), new And(alpha, e))), new Entailment(new Entailment(alpha, new Entailment(e, e1)), new Entailment(new And(alpha, e), new Entailment(new Entailment(new And(alpha, e), new And(alpha, e)), new And(alpha, e))))), null);
        proof.addExpression(new Entailment(new Entailment(alpha, new Entailment(e, e1)), new Entailment(new And(alpha, e), new Entailment(new Entailment(new And(alpha, e), new And(alpha, e)), new And(alpha, e)))), null);
        proof.addExpression(new Entailment(new Entailment(new And(alpha, e), new Entailment(new And(alpha, e), new And(alpha, e))), new Entailment(new Entailment(new And(alpha, e), new Entailment(new Entailment(new And(alpha, e), new And(alpha, e)), new And(alpha, e))), new Entailment(new And(alpha, e), new And(alpha, e)))), null);
        proof.addExpression(new Entailment(new Entailment(new Entailment(new And(alpha, e), new Entailment(new And(alpha, e), new And(alpha, e))), new Entailment(new Entailment(new And(alpha, e), new Entailment(new Entailment(new And(alpha, e), new And(alpha, e)), new And(alpha, e))), new Entailment(new And(alpha, e), new And(alpha, e)))), new Entailment(new Entailment(alpha, new Entailment(e, e1)), new Entailment(new Entailment(new And(alpha, e), new Entailment(new And(alpha, e), new And(alpha, e))), new Entailment(new Entailment(new And(alpha, e), new Entailment(new Entailment(new And(alpha, e), new And(alpha, e)), new And(alpha, e))), new Entailment(new And(alpha, e), new And(alpha, e)))))), null);
        proof.addExpression(new Entailment(new Entailment(alpha, new Entailment(e, e1)), new Entailment(new Entailment(new And(alpha, e), new Entailment(new And(alpha, e), new And(alpha, e))), new Entailment(new Entailment(new And(alpha, e), new Entailment(new Entailment(new And(alpha, e), new And(alpha, e)), new And(alpha, e))), new Entailment(new And(alpha, e), new And(alpha, e))))), null);
        proof.addExpression(new Entailment(new Entailment(new Entailment(alpha, new Entailment(e, e1)), new Entailment(new And(alpha, e), new Entailment(new And(alpha, e), new And(alpha, e)))), new Entailment(new Entailment(new Entailment(alpha, new Entailment(e, e1)), new Entailment(new Entailment(new And(alpha, e), new Entailment(new And(alpha, e), new And(alpha, e))), new Entailment(new Entailment(new And(alpha, e), new Entailment(new Entailment(new And(alpha, e), new And(alpha, e)), new And(alpha, e))), new Entailment(new And(alpha, e), new And(alpha, e))))), new Entailment(new Entailment(alpha, new Entailment(e, e1)), new Entailment(new Entailment(new And(alpha, e), new Entailment(new Entailment(new And(alpha, e), new And(alpha, e)), new And(alpha, e))), new Entailment(new And(alpha, e), new And(alpha, e)))))), null);
        proof.addExpression(new Entailment(new Entailment(new Entailment(alpha, new Entailment(e, e1)), new Entailment(new Entailment(new And(alpha, e), new Entailment(new And(alpha, e), new And(alpha, e))), new Entailment(new Entailment(new And(alpha, e), new Entailment(new Entailment(new And(alpha, e), new And(alpha, e)), new And(alpha, e))), new Entailment(new And(alpha, e), new And(alpha, e))))), new Entailment(new Entailment(alpha, new Entailment(e, e1)), new Entailment(new Entailment(new And(alpha, e), new Entailment(new Entailment(new And(alpha, e), new And(alpha, e)), new And(alpha, e))), new Entailment(new And(alpha, e), new And(alpha, e))))), null);
        proof.addExpression(new Entailment(new Entailment(alpha, new Entailment(e, e1)), new Entailment(new Entailment(new And(alpha, e), new Entailment(new Entailment(new And(alpha, e), new And(alpha, e)), new And(alpha, e))), new Entailment(new And(alpha, e), new And(alpha, e)))), null);
        proof.addExpression(new Entailment(new Entailment(new Entailment(alpha, new Entailment(e, e1)), new Entailment(new And(alpha, e), new Entailment(new Entailment(new And(alpha, e), new And(alpha, e)), new And(alpha, e)))), new Entailment(new Entailment(new Entailment(alpha, new Entailment(e, e1)), new Entailment(new Entailment(new And(alpha, e), new Entailment(new Entailment(new And(alpha, e), new And(alpha, e)), new And(alpha, e))), new Entailment(new And(alpha, e), new And(alpha, e)))), new Entailment(new Entailment(alpha, new Entailment(e, e1)), new Entailment(new And(alpha, e), new And(alpha, e))))), null);
        proof.addExpression(new Entailment(new Entailment(new Entailment(alpha, new Entailment(e, e1)), new Entailment(new Entailment(new And(alpha, e), new Entailment(new Entailment(new And(alpha, e), new And(alpha, e)), new And(alpha, e))), new Entailment(new And(alpha, e), new And(alpha, e)))), new Entailment(new Entailment(alpha, new Entailment(e, e1)), new Entailment(new And(alpha, e), new And(alpha, e)))), null);
        proof.addExpression(new Entailment(new Entailment(alpha, new Entailment(e, e1)), new Entailment(new And(alpha, e), new And(alpha, e))), null);
        proof.addExpression(new Entailment(new Entailment(new And(alpha, e), new And(alpha, e)), new Entailment(new Entailment(new And(alpha, e), new Entailment(new And(alpha, e), alpha)), new Entailment(new And(alpha, e), alpha))), null);
        proof.addExpression(new Entailment(new Entailment(new Entailment(new And(alpha, e), new And(alpha, e)), new Entailment(new Entailment(new And(alpha, e), new Entailment(new And(alpha, e), alpha)), new Entailment(new And(alpha, e), alpha))), new Entailment(new Entailment(alpha, new Entailment(e, e1)), new Entailment(new Entailment(new And(alpha, e), new And(alpha, e)), new Entailment(new Entailment(new And(alpha, e), new Entailment(new And(alpha, e), alpha)), new Entailment(new And(alpha, e), alpha))))), null);
        proof.addExpression(new Entailment(new Entailment(alpha, new Entailment(e, e1)), new Entailment(new Entailment(new And(alpha, e), new And(alpha, e)), new Entailment(new Entailment(new And(alpha, e), new Entailment(new And(alpha, e), alpha)), new Entailment(new And(alpha, e), alpha)))), null);
        proof.addExpression(new Entailment(new Entailment(new Entailment(alpha, new Entailment(e, e1)), new Entailment(new And(alpha, e), new And(alpha, e))), new Entailment(new Entailment(new Entailment(alpha, new Entailment(e, e1)), new Entailment(new Entailment(new And(alpha, e), new And(alpha, e)), new Entailment(new Entailment(new And(alpha, e), new Entailment(new And(alpha, e), alpha)), new Entailment(new And(alpha, e), alpha)))), new Entailment(new Entailment(alpha, new Entailment(e, e1)), new Entailment(new Entailment(new And(alpha, e), new Entailment(new And(alpha, e), alpha)), new Entailment(new And(alpha, e), alpha))))), null);
        proof.addExpression(new Entailment(new Entailment(new Entailment(alpha, new Entailment(e, e1)), new Entailment(new Entailment(new And(alpha, e), new And(alpha, e)), new Entailment(new Entailment(new And(alpha, e), new Entailment(new And(alpha, e), alpha)), new Entailment(new And(alpha, e), alpha)))), new Entailment(new Entailment(alpha, new Entailment(e, e1)), new Entailment(new Entailment(new And(alpha, e), new Entailment(new And(alpha, e), alpha)), new Entailment(new And(alpha, e), alpha)))), null);
        proof.addExpression(new Entailment(new Entailment(alpha, new Entailment(e, e1)), new Entailment(new Entailment(new And(alpha, e), new Entailment(new And(alpha, e), alpha)), new Entailment(new And(alpha, e), alpha))), null);
        proof.addExpression(new Entailment(new Entailment(new And(alpha, e), new And(alpha, e)), new Entailment(new Entailment(new And(alpha, e), new Entailment(new And(alpha, e), e)), new Entailment(new And(alpha, e), e))), null);
        proof.addExpression(new Entailment(new Entailment(new Entailment(new And(alpha, e), new And(alpha, e)), new Entailment(new Entailment(new And(alpha, e), new Entailment(new And(alpha, e), e)), new Entailment(new And(alpha, e), e))), new Entailment(new Entailment(alpha, new Entailment(e, e1)), new Entailment(new Entailment(new And(alpha, e), new And(alpha, e)), new Entailment(new Entailment(new And(alpha, e), new Entailment(new And(alpha, e), e)), new Entailment(new And(alpha, e), e))))), null);
        proof.addExpression(new Entailment(new Entailment(alpha, new Entailment(e, e1)), new Entailment(new Entailment(new And(alpha, e), new And(alpha, e)), new Entailment(new Entailment(new And(alpha, e), new Entailment(new And(alpha, e), e)), new Entailment(new And(alpha, e), e)))), null);
        proof.addExpression(new Entailment(new Entailment(new Entailment(alpha, new Entailment(e, e1)), new Entailment(new And(alpha, e), new And(alpha, e))), new Entailment(new Entailment(new Entailment(alpha, new Entailment(e, e1)), new Entailment(new Entailment(new And(alpha, e), new And(alpha, e)), new Entailment(new Entailment(new And(alpha, e), new Entailment(new And(alpha, e), e)), new Entailment(new And(alpha, e), e)))), new Entailment(new Entailment(alpha, new Entailment(e, e1)), new Entailment(new Entailment(new And(alpha, e), new Entailment(new And(alpha, e), e)), new Entailment(new And(alpha, e), e))))), null);
        proof.addExpression(new Entailment(new Entailment(new Entailment(alpha, new Entailment(e, e1)), new Entailment(new Entailment(new And(alpha, e), new And(alpha, e)), new Entailment(new Entailment(new And(alpha, e), new Entailment(new And(alpha, e), e)), new Entailment(new And(alpha, e), e)))), new Entailment(new Entailment(alpha, new Entailment(e, e1)), new Entailment(new Entailment(new And(alpha, e), new Entailment(new And(alpha, e), e)), new Entailment(new And(alpha, e), e)))), null);
        proof.addExpression(new Entailment(new Entailment(alpha, new Entailment(e, e1)), new Entailment(new Entailment(new And(alpha, e), new Entailment(new And(alpha, e), e)), new Entailment(new And(alpha, e), e))), null);
        proof.addExpression(new Entailment(new Entailment(alpha, new Entailment(e, e1)), new Entailment(new Entailment(alpha, new Entailment(e, e1)), new Entailment(alpha, new Entailment(e, e1)))), null);
        proof.addExpression(new Entailment(new Entailment(alpha, new Entailment(e, e1)), new Entailment(new Entailment(new Entailment(alpha, new Entailment(e, e1)), new Entailment(alpha, new Entailment(e, e1))), new Entailment(alpha, new Entailment(e, e1)))), null);
        proof.addExpression(new Entailment(new Entailment(new Entailment(alpha, new Entailment(e, e1)), new Entailment(new Entailment(alpha, new Entailment(e, e1)), new Entailment(alpha, new Entailment(e, e1)))), new Entailment(new Entailment(new Entailment(alpha, new Entailment(e, e1)), new Entailment(new Entailment(new Entailment(alpha, new Entailment(e, e1)), new Entailment(alpha, new Entailment(e, e1))), new Entailment(alpha, new Entailment(e, e1)))), new Entailment(new Entailment(alpha, new Entailment(e, e1)), new Entailment(alpha, new Entailment(e, e1))))), null);
        proof.addExpression(new Entailment(new Entailment(new Entailment(alpha, new Entailment(e, e1)), new Entailment(new Entailment(new Entailment(alpha, new Entailment(e, e1)), new Entailment(alpha, new Entailment(e, e1))), new Entailment(alpha, new Entailment(e, e1)))), new Entailment(new Entailment(alpha, new Entailment(e, e1)), new Entailment(alpha, new Entailment(e, e1)))), null);
        proof.addExpression(new Entailment(new Entailment(alpha, new Entailment(e, e1)), new Entailment(alpha, new Entailment(e, e1))), null);
        proof.addExpression(new Entailment(new Entailment(alpha, new Entailment(e, e1)), new Entailment(new And(alpha, e), new Entailment(alpha, new Entailment(e, e1)))), null);
        proof.addExpression(new Entailment(new Entailment(new Entailment(alpha, new Entailment(e, e1)), new Entailment(new And(alpha, e), new Entailment(alpha, new Entailment(e, e1)))), new Entailment(new Entailment(alpha, new Entailment(e, e1)), new Entailment(new Entailment(alpha, new Entailment(e, e1)), new Entailment(new And(alpha, e), new Entailment(alpha, new Entailment(e, e1)))))), null);
        proof.addExpression(new Entailment(new Entailment(alpha, new Entailment(e, e1)), new Entailment(new Entailment(alpha, new Entailment(e, e1)), new Entailment(new And(alpha, e), new Entailment(alpha, new Entailment(e, e1))))), null);
        proof.addExpression(new Entailment(new Entailment(new Entailment(alpha, new Entailment(e, e1)), new Entailment(alpha, new Entailment(e, e1))), new Entailment(new Entailment(new Entailment(alpha, new Entailment(e, e1)), new Entailment(new Entailment(alpha, new Entailment(e, e1)), new Entailment(new And(alpha, e), new Entailment(alpha, new Entailment(e, e1))))), new Entailment(new Entailment(alpha, new Entailment(e, e1)), new Entailment(new And(alpha, e), new Entailment(alpha, new Entailment(e, e1)))))), null);
        proof.addExpression(new Entailment(new Entailment(new Entailment(alpha, new Entailment(e, e1)), new Entailment(new Entailment(alpha, new Entailment(e, e1)), new Entailment(new And(alpha, e), new Entailment(alpha, new Entailment(e, e1))))), new Entailment(new Entailment(alpha, new Entailment(e, e1)), new Entailment(new And(alpha, e), new Entailment(alpha, new Entailment(e, e1))))), null);
        proof.addExpression(new Entailment(new Entailment(alpha, new Entailment(e, e1)), new Entailment(new And(alpha, e), new Entailment(alpha, new Entailment(e, e1)))), null);
        proof.addExpression(new Entailment(new Entailment(new And(alpha, e), alpha), new Entailment(new Entailment(new And(alpha, e), new Entailment(alpha, new Entailment(e, e1))), new Entailment(new And(alpha, e), new Entailment(e, e1)))), null);
        proof.addExpression(new Entailment(new Entailment(new Entailment(new And(alpha, e), alpha), new Entailment(new Entailment(new And(alpha, e), new Entailment(alpha, new Entailment(e, e1))), new Entailment(new And(alpha, e), new Entailment(e, e1)))), new Entailment(new Entailment(alpha, new Entailment(e, e1)), new Entailment(new Entailment(new And(alpha, e), alpha), new Entailment(new Entailment(new And(alpha, e), new Entailment(alpha, new Entailment(e, e1))), new Entailment(new And(alpha, e), new Entailment(e, e1)))))), null);
        proof.addExpression(new Entailment(new Entailment(alpha, new Entailment(e, e1)), new Entailment(new Entailment(new And(alpha, e), alpha), new Entailment(new Entailment(new And(alpha, e), new Entailment(alpha, new Entailment(e, e1))), new Entailment(new And(alpha, e), new Entailment(e, e1))))), null);
        proof.addExpression(new Entailment(new Entailment(new Entailment(alpha, new Entailment(e, e1)), new Entailment(new And(alpha, e), alpha)), new Entailment(new Entailment(new Entailment(alpha, new Entailment(e, e1)), new Entailment(new Entailment(new And(alpha, e), alpha), new Entailment(new Entailment(new And(alpha, e), new Entailment(alpha, new Entailment(e, e1))), new Entailment(new And(alpha, e), new Entailment(e, e1))))), new Entailment(new Entailment(alpha, new Entailment(e, e1)), new Entailment(new Entailment(new And(alpha, e), new Entailment(alpha, new Entailment(e, e1))), new Entailment(new And(alpha, e), new Entailment(e, e1)))))), null);
        proof.addExpression(new Entailment(new Entailment(new Entailment(alpha, new Entailment(e, e1)), new Entailment(new Entailment(new And(alpha, e), alpha), new Entailment(new Entailment(new And(alpha, e), new Entailment(alpha, new Entailment(e, e1))), new Entailment(new And(alpha, e), new Entailment(e, e1))))), new Entailment(new Entailment(alpha, new Entailment(e, e1)), new Entailment(new Entailment(new And(alpha, e), new Entailment(alpha, new Entailment(e, e1))), new Entailment(new And(alpha, e), new Entailment(e, e1))))), null);
        proof.addExpression(new Entailment(new Entailment(alpha, new Entailment(e, e1)), new Entailment(new Entailment(new And(alpha, e), new Entailment(alpha, new Entailment(e, e1))), new Entailment(new And(alpha, e), new Entailment(e, e1)))), null);
        proof.addExpression(new Entailment(new Entailment(new Entailment(alpha, new Entailment(e, e1)), new Entailment(new And(alpha, e), new Entailment(alpha, new Entailment(e, e1)))), new Entailment(new Entailment(new Entailment(alpha, new Entailment(e, e1)), new Entailment(new Entailment(new And(alpha, e), new Entailment(alpha, new Entailment(e, e1))), new Entailment(new And(alpha, e), new Entailment(e, e1)))), new Entailment(new Entailment(alpha, new Entailment(e, e1)), new Entailment(new And(alpha, e), new Entailment(e, e1))))), null);
        proof.addExpression(new Entailment(new Entailment(new Entailment(alpha, new Entailment(e, e1)), new Entailment(new Entailment(new And(alpha, e), new Entailment(alpha, new Entailment(e, e1))), new Entailment(new And(alpha, e), new Entailment(e, e1)))), new Entailment(new Entailment(alpha, new Entailment(e, e1)), new Entailment(new And(alpha, e), new Entailment(e, e1)))), null);
        proof.addExpression(new Entailment(new Entailment(alpha, new Entailment(e, e1)), new Entailment(new And(alpha, e), new Entailment(e, e1))), null);
        proof.addExpression(new Entailment(new Entailment(new And(alpha, e), e), new Entailment(new Entailment(new And(alpha, e), new Entailment(e, e1)), new Entailment(new And(alpha, e), e1))), null);
        proof.addExpression(new Entailment(new Entailment(new Entailment(new And(alpha, e), e), new Entailment(new Entailment(new And(alpha, e), new Entailment(e, e1)), new Entailment(new And(alpha, e), e1))), new Entailment(new Entailment(alpha, new Entailment(e, e1)), new Entailment(new Entailment(new And(alpha, e), e), new Entailment(new Entailment(new And(alpha, e), new Entailment(e, e1)), new Entailment(new And(alpha, e), e1))))), null);
        proof.addExpression(new Entailment(new Entailment(alpha, new Entailment(e, e1)), new Entailment(new Entailment(new And(alpha, e), e), new Entailment(new Entailment(new And(alpha, e), new Entailment(e, e1)), new Entailment(new And(alpha, e), e1)))), null);
        proof.addExpression(new Entailment(new Entailment(new Entailment(alpha, new Entailment(e, e1)), new Entailment(new And(alpha, e), e)), new Entailment(new Entailment(new Entailment(alpha, new Entailment(e, e1)), new Entailment(new Entailment(new And(alpha, e), e), new Entailment(new Entailment(new And(alpha, e), new Entailment(e, e1)), new Entailment(new And(alpha, e), e1)))), new Entailment(new Entailment(alpha, new Entailment(e, e1)), new Entailment(new Entailment(new And(alpha, e), new Entailment(e, e1)), new Entailment(new And(alpha, e), e1))))), null);
        proof.addExpression(new Entailment(new Entailment(new Entailment(alpha, new Entailment(e, e1)), new Entailment(new Entailment(new And(alpha, e), e), new Entailment(new Entailment(new And(alpha, e), new Entailment(e, e1)), new Entailment(new And(alpha, e), e1)))), new Entailment(new Entailment(alpha, new Entailment(e, e1)), new Entailment(new Entailment(new And(alpha, e), new Entailment(e, e1)), new Entailment(new And(alpha, e), e1)))), null);
        proof.addExpression(new Entailment(new Entailment(alpha, new Entailment(e, e1)), new Entailment(new Entailment(new And(alpha, e), new Entailment(e, e1)), new Entailment(new And(alpha, e), e1))), null);
        proof.addExpression(new Entailment(new Entailment(new Entailment(alpha, new Entailment(e, e1)), new Entailment(new And(alpha, e), new Entailment(e, e1))), new Entailment(new Entailment(new Entailment(alpha, new Entailment(e, e1)), new Entailment(new Entailment(new And(alpha, e), new Entailment(e, e1)), new Entailment(new And(alpha, e), e1))), new Entailment(new Entailment(alpha, new Entailment(e, e1)), new Entailment(new And(alpha, e), e1)))), null);
        proof.addExpression(new Entailment(new Entailment(new Entailment(alpha, new Entailment(e, e1)), new Entailment(new Entailment(new And(alpha, e), new Entailment(e, e1)), new Entailment(new And(alpha, e), e1))), new Entailment(new Entailment(alpha, new Entailment(e, e1)), new Entailment(new And(alpha, e), e1))), null);
        proof.addExpression(new Entailment(new Entailment(alpha, new Entailment(e, e1)), new Entailment(new And(alpha, e), e1)), null);
        proof.addExpression(new Entailment(new And(alpha, e), e1), null);
        proof.addExpression(new Entailment(new And(alpha, e), new ForAll(variable,e1)), null);
        proof.addExpression(new Entailment(alpha, new Entailment(alpha, alpha)), null);
        proof.addExpression(new Entailment(new Entailment(alpha, new Entailment(alpha, alpha)), new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(alpha, new Entailment(alpha, alpha)))), null);
        proof.addExpression(new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(alpha, new Entailment(alpha, alpha))), null);
        proof.addExpression(new Entailment(alpha, new Entailment(new Entailment(alpha, alpha), alpha)), null);
        proof.addExpression(new Entailment(new Entailment(alpha, new Entailment(new Entailment(alpha, alpha), alpha)), new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(alpha, new Entailment(new Entailment(alpha, alpha), alpha)))), null);
        proof.addExpression(new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(alpha, new Entailment(new Entailment(alpha, alpha), alpha))), null);
        proof.addExpression(new Entailment(new Entailment(alpha, new Entailment(alpha, alpha)), new Entailment(new Entailment(alpha, new Entailment(new Entailment(alpha, alpha), alpha)), new Entailment(alpha, alpha))), null);
        proof.addExpression(new Entailment(new Entailment(new Entailment(alpha, new Entailment(alpha, alpha)), new Entailment(new Entailment(alpha, new Entailment(new Entailment(alpha, alpha), alpha)), new Entailment(alpha, alpha))), new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(new Entailment(alpha, new Entailment(alpha, alpha)), new Entailment(new Entailment(alpha, new Entailment(new Entailment(alpha, alpha), alpha)), new Entailment(alpha, alpha))))), null);
        proof.addExpression(new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(new Entailment(alpha, new Entailment(alpha, alpha)), new Entailment(new Entailment(alpha, new Entailment(new Entailment(alpha, alpha), alpha)), new Entailment(alpha, alpha)))), null);
        proof.addExpression(new Entailment(new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(alpha, new Entailment(alpha, alpha))), new Entailment(new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(new Entailment(alpha, new Entailment(alpha, alpha)), new Entailment(new Entailment(alpha, new Entailment(new Entailment(alpha, alpha), alpha)), new Entailment(alpha, alpha)))), new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(new Entailment(alpha, new Entailment(new Entailment(alpha, alpha), alpha)), new Entailment(alpha, alpha))))), null);
        proof.addExpression(new Entailment(new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(new Entailment(alpha, new Entailment(alpha, alpha)), new Entailment(new Entailment(alpha, new Entailment(new Entailment(alpha, alpha), alpha)), new Entailment(alpha, alpha)))), new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(new Entailment(alpha, new Entailment(new Entailment(alpha, alpha), alpha)), new Entailment(alpha, alpha)))), null);
        proof.addExpression(new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(new Entailment(alpha, new Entailment(new Entailment(alpha, alpha), alpha)), new Entailment(alpha, alpha))), null);
        proof.addExpression(new Entailment(new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(alpha, new Entailment(new Entailment(alpha, alpha), alpha))), new Entailment(new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(new Entailment(alpha, new Entailment(new Entailment(alpha, alpha), alpha)), new Entailment(alpha, alpha))), new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(alpha, alpha)))), null);
        proof.addExpression(new Entailment(new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(new Entailment(alpha, new Entailment(new Entailment(alpha, alpha), alpha)), new Entailment(alpha, alpha))), new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(alpha, alpha))), null);
        proof.addExpression(new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(alpha, alpha)), null);
        proof.addExpression(new Entailment(alpha, new Entailment(e, alpha)), null);
        proof.addExpression(new Entailment(new Entailment(alpha, new Entailment(e, alpha)), new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(alpha, new Entailment(e, alpha)))), null);
        proof.addExpression(new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(alpha, new Entailment(e, alpha))), null);
        proof.addExpression(new Entailment(new Entailment(alpha, new Entailment(e, alpha)), new Entailment(alpha, new Entailment(alpha, new Entailment(e, alpha)))), null);
        proof.addExpression(new Entailment(new Entailment(new Entailment(alpha, new Entailment(e, alpha)), new Entailment(alpha, new Entailment(alpha, new Entailment(e, alpha)))), new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(new Entailment(alpha, new Entailment(e, alpha)), new Entailment(alpha, new Entailment(alpha, new Entailment(e, alpha)))))), null);
        proof.addExpression(new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(new Entailment(alpha, new Entailment(e, alpha)), new Entailment(alpha, new Entailment(alpha, new Entailment(e, alpha))))), null);
        proof.addExpression(new Entailment(new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(alpha, new Entailment(e, alpha))), new Entailment(new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(new Entailment(alpha, new Entailment(e, alpha)), new Entailment(alpha, new Entailment(alpha, new Entailment(e, alpha))))), new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(alpha, new Entailment(alpha, new Entailment(e, alpha)))))), null);
        proof.addExpression(new Entailment(new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(new Entailment(alpha, new Entailment(e, alpha)), new Entailment(alpha, new Entailment(alpha, new Entailment(e, alpha))))), new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(alpha, new Entailment(alpha, new Entailment(e, alpha))))), null);
        proof.addExpression(new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(alpha, new Entailment(alpha, new Entailment(e, alpha)))), null);
        proof.addExpression(new Entailment(new Entailment(alpha, alpha), new Entailment(new Entailment(alpha, new Entailment(alpha, new Entailment(e, alpha))), new Entailment(alpha, new Entailment(e, alpha)))), null);
        proof.addExpression(new Entailment(new Entailment(new Entailment(alpha, alpha), new Entailment(new Entailment(alpha, new Entailment(alpha, new Entailment(e, alpha))), new Entailment(alpha, new Entailment(e, alpha)))), new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(new Entailment(alpha, alpha), new Entailment(new Entailment(alpha, new Entailment(alpha, new Entailment(e, alpha))), new Entailment(alpha, new Entailment(e, alpha)))))), null);
        proof.addExpression(new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(new Entailment(alpha, alpha), new Entailment(new Entailment(alpha, new Entailment(alpha, new Entailment(e, alpha))), new Entailment(alpha, new Entailment(e, alpha))))), null);
        proof.addExpression(new Entailment(new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(alpha, alpha)), new Entailment(new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(new Entailment(alpha, alpha), new Entailment(new Entailment(alpha, new Entailment(alpha, new Entailment(e, alpha))), new Entailment(alpha, new Entailment(e, alpha))))), new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(new Entailment(alpha, new Entailment(alpha, new Entailment(e, alpha))), new Entailment(alpha, new Entailment(e, alpha)))))), null);
        proof.addExpression(new Entailment(new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(new Entailment(alpha, alpha), new Entailment(new Entailment(alpha, new Entailment(alpha, new Entailment(e, alpha))), new Entailment(alpha, new Entailment(e, alpha))))), new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(new Entailment(alpha, new Entailment(alpha, new Entailment(e, alpha))), new Entailment(alpha, new Entailment(e, alpha))))), null);
        proof.addExpression(new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(new Entailment(alpha, new Entailment(alpha, new Entailment(e, alpha))), new Entailment(alpha, new Entailment(e, alpha)))), null);
        proof.addExpression(new Entailment(alpha, new Entailment(e, alpha)), null);
        proof.addExpression(new Entailment(new Entailment(alpha, new Entailment(e, alpha)), new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(alpha, new Entailment(e, alpha)))), null);
        proof.addExpression(new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(alpha, new Entailment(e, alpha))), null);
        proof.addExpression(new Entailment(e, new Entailment(e, e)), null);
        proof.addExpression(new Entailment(new Entailment(e, new Entailment(e, e)), new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(e, new Entailment(e, e)))), null);
        proof.addExpression(new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(e, new Entailment(e, e))), null);
        proof.addExpression(new Entailment(new Entailment(e, new Entailment(e, e)), new Entailment(alpha, new Entailment(e, new Entailment(e, e)))), null);
        proof.addExpression(new Entailment(new Entailment(new Entailment(e, new Entailment(e, e)), new Entailment(alpha, new Entailment(e, new Entailment(e, e)))), new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(new Entailment(e, new Entailment(e, e)), new Entailment(alpha, new Entailment(e, new Entailment(e, e)))))), null);
        proof.addExpression(new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(new Entailment(e, new Entailment(e, e)), new Entailment(alpha, new Entailment(e, new Entailment(e, e))))), null);
        proof.addExpression(new Entailment(new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(e, new Entailment(e, e))), new Entailment(new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(new Entailment(e, new Entailment(e, e)), new Entailment(alpha, new Entailment(e, new Entailment(e, e))))), new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(alpha, new Entailment(e, new Entailment(e, e)))))), null);
        proof.addExpression(new Entailment(new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(new Entailment(e, new Entailment(e, e)), new Entailment(alpha, new Entailment(e, new Entailment(e, e))))), new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(alpha, new Entailment(e, new Entailment(e, e))))), null);
        proof.addExpression(new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(alpha, new Entailment(e, new Entailment(e, e)))), null);
        proof.addExpression(new Entailment(e, new Entailment(new Entailment(e, e), e)), null);
        proof.addExpression(new Entailment(new Entailment(e, new Entailment(new Entailment(e, e), e)), new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(e, new Entailment(new Entailment(e, e), e)))), null);
        proof.addExpression(new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(e, new Entailment(new Entailment(e, e), e))), null);
        proof.addExpression(new Entailment(new Entailment(e, new Entailment(new Entailment(e, e), e)), new Entailment(alpha, new Entailment(e, new Entailment(new Entailment(e, e), e)))), null);
        proof.addExpression(new Entailment(new Entailment(new Entailment(e, new Entailment(new Entailment(e, e), e)), new Entailment(alpha, new Entailment(e, new Entailment(new Entailment(e, e), e)))), new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(new Entailment(e, new Entailment(new Entailment(e, e), e)), new Entailment(alpha, new Entailment(e, new Entailment(new Entailment(e, e), e)))))), null);
        proof.addExpression(new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(new Entailment(e, new Entailment(new Entailment(e, e), e)), new Entailment(alpha, new Entailment(e, new Entailment(new Entailment(e, e), e))))), null);
        proof.addExpression(new Entailment(new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(e, new Entailment(new Entailment(e, e), e))), new Entailment(new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(new Entailment(e, new Entailment(new Entailment(e, e), e)), new Entailment(alpha, new Entailment(e, new Entailment(new Entailment(e, e), e))))), new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(alpha, new Entailment(e, new Entailment(new Entailment(e, e), e)))))), null);
        proof.addExpression(new Entailment(new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(new Entailment(e, new Entailment(new Entailment(e, e), e)), new Entailment(alpha, new Entailment(e, new Entailment(new Entailment(e, e), e))))), new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(alpha, new Entailment(e, new Entailment(new Entailment(e, e), e))))), null);
        proof.addExpression(new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(alpha, new Entailment(e, new Entailment(new Entailment(e, e), e)))), null);
        proof.addExpression(new Entailment(new Entailment(e, new Entailment(e, e)), new Entailment(new Entailment(e, new Entailment(new Entailment(e, e), e)), new Entailment(e, e))), null);
        proof.addExpression(new Entailment(new Entailment(new Entailment(e, new Entailment(e, e)), new Entailment(new Entailment(e, new Entailment(new Entailment(e, e), e)), new Entailment(e, e))), new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(new Entailment(e, new Entailment(e, e)), new Entailment(new Entailment(e, new Entailment(new Entailment(e, e), e)), new Entailment(e, e))))), null);
        proof.addExpression(new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(new Entailment(e, new Entailment(e, e)), new Entailment(new Entailment(e, new Entailment(new Entailment(e, e), e)), new Entailment(e, e)))), null);
        proof.addExpression(new Entailment(new Entailment(new Entailment(e, new Entailment(e, e)), new Entailment(new Entailment(e, new Entailment(new Entailment(e, e), e)), new Entailment(e, e))), new Entailment(alpha, new Entailment(new Entailment(e, new Entailment(e, e)), new Entailment(new Entailment(e, new Entailment(new Entailment(e, e), e)), new Entailment(e, e))))), null);
        proof.addExpression(new Entailment(new Entailment(new Entailment(new Entailment(e, new Entailment(e, e)), new Entailment(new Entailment(e, new Entailment(new Entailment(e, e), e)), new Entailment(e, e))), new Entailment(alpha, new Entailment(new Entailment(e, new Entailment(e, e)), new Entailment(new Entailment(e, new Entailment(new Entailment(e, e), e)), new Entailment(e, e))))), new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(new Entailment(new Entailment(e, new Entailment(e, e)), new Entailment(new Entailment(e, new Entailment(new Entailment(e, e), e)), new Entailment(e, e))), new Entailment(alpha, new Entailment(new Entailment(e, new Entailment(e, e)), new Entailment(new Entailment(e, new Entailment(new Entailment(e, e), e)), new Entailment(e, e))))))), null);
        proof.addExpression(new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(new Entailment(new Entailment(e, new Entailment(e, e)), new Entailment(new Entailment(e, new Entailment(new Entailment(e, e), e)), new Entailment(e, e))), new Entailment(alpha, new Entailment(new Entailment(e, new Entailment(e, e)), new Entailment(new Entailment(e, new Entailment(new Entailment(e, e), e)), new Entailment(e, e)))))), null);
        proof.addExpression(new Entailment(new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(new Entailment(e, new Entailment(e, e)), new Entailment(new Entailment(e, new Entailment(new Entailment(e, e), e)), new Entailment(e, e)))), new Entailment(new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(new Entailment(new Entailment(e, new Entailment(e, e)), new Entailment(new Entailment(e, new Entailment(new Entailment(e, e), e)), new Entailment(e, e))), new Entailment(alpha, new Entailment(new Entailment(e, new Entailment(e, e)), new Entailment(new Entailment(e, new Entailment(new Entailment(e, e), e)), new Entailment(e, e)))))), new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(alpha, new Entailment(new Entailment(e, new Entailment(e, e)), new Entailment(new Entailment(e, new Entailment(new Entailment(e, e), e)), new Entailment(e, e))))))), null);
        proof.addExpression(new Entailment(new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(new Entailment(new Entailment(e, new Entailment(e, e)), new Entailment(new Entailment(e, new Entailment(new Entailment(e, e), e)), new Entailment(e, e))), new Entailment(alpha, new Entailment(new Entailment(e, new Entailment(e, e)), new Entailment(new Entailment(e, new Entailment(new Entailment(e, e), e)), new Entailment(e, e)))))), new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(alpha, new Entailment(new Entailment(e, new Entailment(e, e)), new Entailment(new Entailment(e, new Entailment(new Entailment(e, e), e)), new Entailment(e, e)))))), null);
        proof.addExpression(new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(alpha, new Entailment(new Entailment(e, new Entailment(e, e)), new Entailment(new Entailment(e, new Entailment(new Entailment(e, e), e)), new Entailment(e, e))))), null);
        proof.addExpression(new Entailment(new Entailment(alpha, new Entailment(e, new Entailment(e, e))), new Entailment(new Entailment(alpha, new Entailment(new Entailment(e, new Entailment(e, e)), new Entailment(new Entailment(e, new Entailment(new Entailment(e, e), e)), new Entailment(e, e)))), new Entailment(alpha, new Entailment(new Entailment(e, new Entailment(new Entailment(e, e), e)), new Entailment(e, e))))), null);
        proof.addExpression(new Entailment(new Entailment(new Entailment(alpha, new Entailment(e, new Entailment(e, e))), new Entailment(new Entailment(alpha, new Entailment(new Entailment(e, new Entailment(e, e)), new Entailment(new Entailment(e, new Entailment(new Entailment(e, e), e)), new Entailment(e, e)))), new Entailment(alpha, new Entailment(new Entailment(e, new Entailment(new Entailment(e, e), e)), new Entailment(e, e))))), new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(new Entailment(alpha, new Entailment(e, new Entailment(e, e))), new Entailment(new Entailment(alpha, new Entailment(new Entailment(e, new Entailment(e, e)), new Entailment(new Entailment(e, new Entailment(new Entailment(e, e), e)), new Entailment(e, e)))), new Entailment(alpha, new Entailment(new Entailment(e, new Entailment(new Entailment(e, e), e)), new Entailment(e, e))))))), null);
        proof.addExpression(new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(new Entailment(alpha, new Entailment(e, new Entailment(e, e))), new Entailment(new Entailment(alpha, new Entailment(new Entailment(e, new Entailment(e, e)), new Entailment(new Entailment(e, new Entailment(new Entailment(e, e), e)), new Entailment(e, e)))), new Entailment(alpha, new Entailment(new Entailment(e, new Entailment(new Entailment(e, e), e)), new Entailment(e, e)))))), null);
        proof.addExpression(new Entailment(new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(alpha, new Entailment(e, new Entailment(e, e)))), new Entailment(new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(new Entailment(alpha, new Entailment(e, new Entailment(e, e))), new Entailment(new Entailment(alpha, new Entailment(new Entailment(e, new Entailment(e, e)), new Entailment(new Entailment(e, new Entailment(new Entailment(e, e), e)), new Entailment(e, e)))), new Entailment(alpha, new Entailment(new Entailment(e, new Entailment(new Entailment(e, e), e)), new Entailment(e, e)))))), new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(new Entailment(alpha, new Entailment(new Entailment(e, new Entailment(e, e)), new Entailment(new Entailment(e, new Entailment(new Entailment(e, e), e)), new Entailment(e, e)))), new Entailment(alpha, new Entailment(new Entailment(e, new Entailment(new Entailment(e, e), e)), new Entailment(e, e))))))), null);
        proof.addExpression(new Entailment(new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(new Entailment(alpha, new Entailment(e, new Entailment(e, e))), new Entailment(new Entailment(alpha, new Entailment(new Entailment(e, new Entailment(e, e)), new Entailment(new Entailment(e, new Entailment(new Entailment(e, e), e)), new Entailment(e, e)))), new Entailment(alpha, new Entailment(new Entailment(e, new Entailment(new Entailment(e, e), e)), new Entailment(e, e)))))), new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(new Entailment(alpha, new Entailment(new Entailment(e, new Entailment(e, e)), new Entailment(new Entailment(e, new Entailment(new Entailment(e, e), e)), new Entailment(e, e)))), new Entailment(alpha, new Entailment(new Entailment(e, new Entailment(new Entailment(e, e), e)), new Entailment(e, e)))))), null);
        proof.addExpression(new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(new Entailment(alpha, new Entailment(new Entailment(e, new Entailment(e, e)), new Entailment(new Entailment(e, new Entailment(new Entailment(e, e), e)), new Entailment(e, e)))), new Entailment(alpha, new Entailment(new Entailment(e, new Entailment(new Entailment(e, e), e)), new Entailment(e, e))))), null);
        proof.addExpression(new Entailment(new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(alpha, new Entailment(new Entailment(e, new Entailment(e, e)), new Entailment(new Entailment(e, new Entailment(new Entailment(e, e), e)), new Entailment(e, e))))), new Entailment(new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(new Entailment(alpha, new Entailment(new Entailment(e, new Entailment(e, e)), new Entailment(new Entailment(e, new Entailment(new Entailment(e, e), e)), new Entailment(e, e)))), new Entailment(alpha, new Entailment(new Entailment(e, new Entailment(new Entailment(e, e), e)), new Entailment(e, e))))), new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(alpha, new Entailment(new Entailment(e, new Entailment(new Entailment(e, e), e)), new Entailment(e, e)))))), null);
        proof.addExpression(new Entailment(new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(new Entailment(alpha, new Entailment(new Entailment(e, new Entailment(e, e)), new Entailment(new Entailment(e, new Entailment(new Entailment(e, e), e)), new Entailment(e, e)))), new Entailment(alpha, new Entailment(new Entailment(e, new Entailment(new Entailment(e, e), e)), new Entailment(e, e))))), new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(alpha, new Entailment(new Entailment(e, new Entailment(new Entailment(e, e), e)), new Entailment(e, e))))), null);
        proof.addExpression(new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(alpha, new Entailment(new Entailment(e, new Entailment(new Entailment(e, e), e)), new Entailment(e, e)))), null);
        proof.addExpression(new Entailment(new Entailment(alpha, new Entailment(e, new Entailment(new Entailment(e, e), e))), new Entailment(new Entailment(alpha, new Entailment(new Entailment(e, new Entailment(new Entailment(e, e), e)), new Entailment(e, e))), new Entailment(alpha, new Entailment(e, e)))), null);
        proof.addExpression(new Entailment(new Entailment(new Entailment(alpha, new Entailment(e, new Entailment(new Entailment(e, e), e))), new Entailment(new Entailment(alpha, new Entailment(new Entailment(e, new Entailment(new Entailment(e, e), e)), new Entailment(e, e))), new Entailment(alpha, new Entailment(e, e)))), new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(new Entailment(alpha, new Entailment(e, new Entailment(new Entailment(e, e), e))), new Entailment(new Entailment(alpha, new Entailment(new Entailment(e, new Entailment(new Entailment(e, e), e)), new Entailment(e, e))), new Entailment(alpha, new Entailment(e, e)))))), null);
        proof.addExpression(new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(new Entailment(alpha, new Entailment(e, new Entailment(new Entailment(e, e), e))), new Entailment(new Entailment(alpha, new Entailment(new Entailment(e, new Entailment(new Entailment(e, e), e)), new Entailment(e, e))), new Entailment(alpha, new Entailment(e, e))))), null);
        proof.addExpression(new Entailment(new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(alpha, new Entailment(e, new Entailment(new Entailment(e, e), e)))), new Entailment(new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(new Entailment(alpha, new Entailment(e, new Entailment(new Entailment(e, e), e))), new Entailment(new Entailment(alpha, new Entailment(new Entailment(e, new Entailment(new Entailment(e, e), e)), new Entailment(e, e))), new Entailment(alpha, new Entailment(e, e))))), new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(new Entailment(alpha, new Entailment(new Entailment(e, new Entailment(new Entailment(e, e), e)), new Entailment(e, e))), new Entailment(alpha, new Entailment(e, e)))))), null);
        proof.addExpression(new Entailment(new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(new Entailment(alpha, new Entailment(e, new Entailment(new Entailment(e, e), e))), new Entailment(new Entailment(alpha, new Entailment(new Entailment(e, new Entailment(new Entailment(e, e), e)), new Entailment(e, e))), new Entailment(alpha, new Entailment(e, e))))), new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(new Entailment(alpha, new Entailment(new Entailment(e, new Entailment(new Entailment(e, e), e)), new Entailment(e, e))), new Entailment(alpha, new Entailment(e, e))))), null);
        proof.addExpression(new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(new Entailment(alpha, new Entailment(new Entailment(e, new Entailment(new Entailment(e, e), e)), new Entailment(e, e))), new Entailment(alpha, new Entailment(e, e)))), null);
        proof.addExpression(new Entailment(new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(alpha, new Entailment(new Entailment(e, new Entailment(new Entailment(e, e), e)), new Entailment(e, e)))), new Entailment(new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(new Entailment(alpha, new Entailment(new Entailment(e, new Entailment(new Entailment(e, e), e)), new Entailment(e, e))), new Entailment(alpha, new Entailment(e, e)))), new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(alpha, new Entailment(e, e))))), null);
        proof.addExpression(new Entailment(new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(new Entailment(alpha, new Entailment(new Entailment(e, new Entailment(new Entailment(e, e), e)), new Entailment(e, e))), new Entailment(alpha, new Entailment(e, e)))), new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(alpha, new Entailment(e, e)))), null);
        proof.addExpression(new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(alpha, new Entailment(e, e))), null);
        proof.addExpression(new Entailment(alpha, new Entailment(e, new And(alpha, e))), null);
        proof.addExpression(new Entailment(new Entailment(alpha, new Entailment(e, new And(alpha, e))), new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(alpha, new Entailment(e, new And(alpha, e))))), null);
        proof.addExpression(new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(alpha, new Entailment(e, new And(alpha, e)))), null);
        proof.addExpression(new Entailment(new Entailment(alpha, new Entailment(e, new And(alpha, e))), new Entailment(alpha, new Entailment(alpha, new Entailment(e, new And(alpha, e))))), null);
        proof.addExpression(new Entailment(new Entailment(new Entailment(alpha, new Entailment(e, new And(alpha, e))), new Entailment(alpha, new Entailment(alpha, new Entailment(e, new And(alpha, e))))), new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(new Entailment(alpha, new Entailment(e, new And(alpha, e))), new Entailment(alpha, new Entailment(alpha, new Entailment(e, new And(alpha, e))))))), null);
        proof.addExpression(new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(new Entailment(alpha, new Entailment(e, new And(alpha, e))), new Entailment(alpha, new Entailment(alpha, new Entailment(e, new And(alpha, e)))))), null);
        proof.addExpression(new Entailment(new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(alpha, new Entailment(e, new And(alpha, e)))), new Entailment(new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(new Entailment(alpha, new Entailment(e, new And(alpha, e))), new Entailment(alpha, new Entailment(alpha, new Entailment(e, new And(alpha, e)))))), new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(alpha, new Entailment(alpha, new Entailment(e, new And(alpha, e))))))), null);
        proof.addExpression(new Entailment(new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(new Entailment(alpha, new Entailment(e, new And(alpha, e))), new Entailment(alpha, new Entailment(alpha, new Entailment(e, new And(alpha, e)))))), new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(alpha, new Entailment(alpha, new Entailment(e, new And(alpha, e)))))), null);
        proof.addExpression(new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(alpha, new Entailment(alpha, new Entailment(e, new And(alpha, e))))), null);
        proof.addExpression(new Entailment(new Entailment(alpha, new Entailment(e, new And(alpha, e))), new Entailment(e, new Entailment(alpha, new Entailment(e, new And(alpha, e))))), null);
        proof.addExpression(new Entailment(new Entailment(new Entailment(alpha, new Entailment(e, new And(alpha, e))), new Entailment(e, new Entailment(alpha, new Entailment(e, new And(alpha, e))))), new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(new Entailment(alpha, new Entailment(e, new And(alpha, e))), new Entailment(e, new Entailment(alpha, new Entailment(e, new And(alpha, e))))))), null);
        proof.addExpression(new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(new Entailment(alpha, new Entailment(e, new And(alpha, e))), new Entailment(e, new Entailment(alpha, new Entailment(e, new And(alpha, e)))))), null);
        proof.addExpression(new Entailment(new Entailment(new Entailment(alpha, new Entailment(e, new And(alpha, e))), new Entailment(e, new Entailment(alpha, new Entailment(e, new And(alpha, e))))), new Entailment(alpha, new Entailment(new Entailment(alpha, new Entailment(e, new And(alpha, e))), new Entailment(e, new Entailment(alpha, new Entailment(e, new And(alpha, e))))))), null);
        proof.addExpression(new Entailment(new Entailment(new Entailment(new Entailment(alpha, new Entailment(e, new And(alpha, e))), new Entailment(e, new Entailment(alpha, new Entailment(e, new And(alpha, e))))), new Entailment(alpha, new Entailment(new Entailment(alpha, new Entailment(e, new And(alpha, e))), new Entailment(e, new Entailment(alpha, new Entailment(e, new And(alpha, e))))))), new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(new Entailment(new Entailment(alpha, new Entailment(e, new And(alpha, e))), new Entailment(e, new Entailment(alpha, new Entailment(e, new And(alpha, e))))), new Entailment(alpha, new Entailment(new Entailment(alpha, new Entailment(e, new And(alpha, e))), new Entailment(e, new Entailment(alpha, new Entailment(e, new And(alpha, e))))))))), null);
        proof.addExpression(new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(new Entailment(new Entailment(alpha, new Entailment(e, new And(alpha, e))), new Entailment(e, new Entailment(alpha, new Entailment(e, new And(alpha, e))))), new Entailment(alpha, new Entailment(new Entailment(alpha, new Entailment(e, new And(alpha, e))), new Entailment(e, new Entailment(alpha, new Entailment(e, new And(alpha, e)))))))), null);
        proof.addExpression(new Entailment(new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(new Entailment(alpha, new Entailment(e, new And(alpha, e))), new Entailment(e, new Entailment(alpha, new Entailment(e, new And(alpha, e)))))), new Entailment(new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(new Entailment(new Entailment(alpha, new Entailment(e, new And(alpha, e))), new Entailment(e, new Entailment(alpha, new Entailment(e, new And(alpha, e))))), new Entailment(alpha, new Entailment(new Entailment(alpha, new Entailment(e, new And(alpha, e))), new Entailment(e, new Entailment(alpha, new Entailment(e, new And(alpha, e)))))))), new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(alpha, new Entailment(new Entailment(alpha, new Entailment(e, new And(alpha, e))), new Entailment(e, new Entailment(alpha, new Entailment(e, new And(alpha, e))))))))), null);
        proof.addExpression(new Entailment(new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(new Entailment(new Entailment(alpha, new Entailment(e, new And(alpha, e))), new Entailment(e, new Entailment(alpha, new Entailment(e, new And(alpha, e))))), new Entailment(alpha, new Entailment(new Entailment(alpha, new Entailment(e, new And(alpha, e))), new Entailment(e, new Entailment(alpha, new Entailment(e, new And(alpha, e)))))))), new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(alpha, new Entailment(new Entailment(alpha, new Entailment(e, new And(alpha, e))), new Entailment(e, new Entailment(alpha, new Entailment(e, new And(alpha, e)))))))), null);
        proof.addExpression(new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(alpha, new Entailment(new Entailment(alpha, new Entailment(e, new And(alpha, e))), new Entailment(e, new Entailment(alpha, new Entailment(e, new And(alpha, e))))))), null);
        proof.addExpression(new Entailment(new Entailment(alpha, new Entailment(alpha, new Entailment(e, new And(alpha, e)))), new Entailment(new Entailment(alpha, new Entailment(new Entailment(alpha, new Entailment(e, new And(alpha, e))), new Entailment(e, new Entailment(alpha, new Entailment(e, new And(alpha, e)))))), new Entailment(alpha, new Entailment(e, new Entailment(alpha, new Entailment(e, new And(alpha, e))))))), null);
        proof.addExpression(new Entailment(new Entailment(new Entailment(alpha, new Entailment(alpha, new Entailment(e, new And(alpha, e)))), new Entailment(new Entailment(alpha, new Entailment(new Entailment(alpha, new Entailment(e, new And(alpha, e))), new Entailment(e, new Entailment(alpha, new Entailment(e, new And(alpha, e)))))), new Entailment(alpha, new Entailment(e, new Entailment(alpha, new Entailment(e, new And(alpha, e))))))), new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(new Entailment(alpha, new Entailment(alpha, new Entailment(e, new And(alpha, e)))), new Entailment(new Entailment(alpha, new Entailment(new Entailment(alpha, new Entailment(e, new And(alpha, e))), new Entailment(e, new Entailment(alpha, new Entailment(e, new And(alpha, e)))))), new Entailment(alpha, new Entailment(e, new Entailment(alpha, new Entailment(e, new And(alpha, e))))))))), null);
        proof.addExpression(new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(new Entailment(alpha, new Entailment(alpha, new Entailment(e, new And(alpha, e)))), new Entailment(new Entailment(alpha, new Entailment(new Entailment(alpha, new Entailment(e, new And(alpha, e))), new Entailment(e, new Entailment(alpha, new Entailment(e, new And(alpha, e)))))), new Entailment(alpha, new Entailment(e, new Entailment(alpha, new Entailment(e, new And(alpha, e)))))))), null);
        proof.addExpression(new Entailment(new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(alpha, new Entailment(alpha, new Entailment(e, new And(alpha, e))))), new Entailment(new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(new Entailment(alpha, new Entailment(alpha, new Entailment(e, new And(alpha, e)))), new Entailment(new Entailment(alpha, new Entailment(new Entailment(alpha, new Entailment(e, new And(alpha, e))), new Entailment(e, new Entailment(alpha, new Entailment(e, new And(alpha, e)))))), new Entailment(alpha, new Entailment(e, new Entailment(alpha, new Entailment(e, new And(alpha, e)))))))), new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(new Entailment(alpha, new Entailment(new Entailment(alpha, new Entailment(e, new And(alpha, e))), new Entailment(e, new Entailment(alpha, new Entailment(e, new And(alpha, e)))))), new Entailment(alpha, new Entailment(e, new Entailment(alpha, new Entailment(e, new And(alpha, e))))))))), null);
        proof.addExpression(new Entailment(new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(new Entailment(alpha, new Entailment(alpha, new Entailment(e, new And(alpha, e)))), new Entailment(new Entailment(alpha, new Entailment(new Entailment(alpha, new Entailment(e, new And(alpha, e))), new Entailment(e, new Entailment(alpha, new Entailment(e, new And(alpha, e)))))), new Entailment(alpha, new Entailment(e, new Entailment(alpha, new Entailment(e, new And(alpha, e)))))))), new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(new Entailment(alpha, new Entailment(new Entailment(alpha, new Entailment(e, new And(alpha, e))), new Entailment(e, new Entailment(alpha, new Entailment(e, new And(alpha, e)))))), new Entailment(alpha, new Entailment(e, new Entailment(alpha, new Entailment(e, new And(alpha, e)))))))), null);
        proof.addExpression(new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(new Entailment(alpha, new Entailment(new Entailment(alpha, new Entailment(e, new And(alpha, e))), new Entailment(e, new Entailment(alpha, new Entailment(e, new And(alpha, e)))))), new Entailment(alpha, new Entailment(e, new Entailment(alpha, new Entailment(e, new And(alpha, e))))))), null);
        proof.addExpression(new Entailment(new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(alpha, new Entailment(new Entailment(alpha, new Entailment(e, new And(alpha, e))), new Entailment(e, new Entailment(alpha, new Entailment(e, new And(alpha, e))))))), new Entailment(new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(new Entailment(alpha, new Entailment(new Entailment(alpha, new Entailment(e, new And(alpha, e))), new Entailment(e, new Entailment(alpha, new Entailment(e, new And(alpha, e)))))), new Entailment(alpha, new Entailment(e, new Entailment(alpha, new Entailment(e, new And(alpha, e))))))), new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(alpha, new Entailment(e, new Entailment(alpha, new Entailment(e, new And(alpha, e)))))))), null);
        proof.addExpression(new Entailment(new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(new Entailment(alpha, new Entailment(new Entailment(alpha, new Entailment(e, new And(alpha, e))), new Entailment(e, new Entailment(alpha, new Entailment(e, new And(alpha, e)))))), new Entailment(alpha, new Entailment(e, new Entailment(alpha, new Entailment(e, new And(alpha, e))))))), new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(alpha, new Entailment(e, new Entailment(alpha, new Entailment(e, new And(alpha, e))))))), null);
        proof.addExpression(new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(alpha, new Entailment(e, new Entailment(alpha, new Entailment(e, new And(alpha, e)))))), null);
        proof.addExpression(new Entailment(new Entailment(e, alpha), new Entailment(new Entailment(e, new Entailment(alpha, new Entailment(e, new And(alpha, e)))), new Entailment(e, new Entailment(e, new And(alpha, e))))), null);
        proof.addExpression(new Entailment(new Entailment(new Entailment(e, alpha), new Entailment(new Entailment(e, new Entailment(alpha, new Entailment(e, new And(alpha, e)))), new Entailment(e, new Entailment(e, new And(alpha, e))))), new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(new Entailment(e, alpha), new Entailment(new Entailment(e, new Entailment(alpha, new Entailment(e, new And(alpha, e)))), new Entailment(e, new Entailment(e, new And(alpha, e))))))), null);
        proof.addExpression(new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(new Entailment(e, alpha), new Entailment(new Entailment(e, new Entailment(alpha, new Entailment(e, new And(alpha, e)))), new Entailment(e, new Entailment(e, new And(alpha, e)))))), null);
        proof.addExpression(new Entailment(new Entailment(new Entailment(e, alpha), new Entailment(new Entailment(e, new Entailment(alpha, new Entailment(e, new And(alpha, e)))), new Entailment(e, new Entailment(e, new And(alpha, e))))), new Entailment(alpha, new Entailment(new Entailment(e, alpha), new Entailment(new Entailment(e, new Entailment(alpha, new Entailment(e, new And(alpha, e)))), new Entailment(e, new Entailment(e, new And(alpha, e))))))), null);
        proof.addExpression(new Entailment(new Entailment(new Entailment(new Entailment(e, alpha), new Entailment(new Entailment(e, new Entailment(alpha, new Entailment(e, new And(alpha, e)))), new Entailment(e, new Entailment(e, new And(alpha, e))))), new Entailment(alpha, new Entailment(new Entailment(e, alpha), new Entailment(new Entailment(e, new Entailment(alpha, new Entailment(e, new And(alpha, e)))), new Entailment(e, new Entailment(e, new And(alpha, e))))))), new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(new Entailment(new Entailment(e, alpha), new Entailment(new Entailment(e, new Entailment(alpha, new Entailment(e, new And(alpha, e)))), new Entailment(e, new Entailment(e, new And(alpha, e))))), new Entailment(alpha, new Entailment(new Entailment(e, alpha), new Entailment(new Entailment(e, new Entailment(alpha, new Entailment(e, new And(alpha, e)))), new Entailment(e, new Entailment(e, new And(alpha, e))))))))), null);
        proof.addExpression(new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(new Entailment(new Entailment(e, alpha), new Entailment(new Entailment(e, new Entailment(alpha, new Entailment(e, new And(alpha, e)))), new Entailment(e, new Entailment(e, new And(alpha, e))))), new Entailment(alpha, new Entailment(new Entailment(e, alpha), new Entailment(new Entailment(e, new Entailment(alpha, new Entailment(e, new And(alpha, e)))), new Entailment(e, new Entailment(e, new And(alpha, e)))))))), null);
        proof.addExpression(new Entailment(new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(new Entailment(e, alpha), new Entailment(new Entailment(e, new Entailment(alpha, new Entailment(e, new And(alpha, e)))), new Entailment(e, new Entailment(e, new And(alpha, e)))))), new Entailment(new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(new Entailment(new Entailment(e, alpha), new Entailment(new Entailment(e, new Entailment(alpha, new Entailment(e, new And(alpha, e)))), new Entailment(e, new Entailment(e, new And(alpha, e))))), new Entailment(alpha, new Entailment(new Entailment(e, alpha), new Entailment(new Entailment(e, new Entailment(alpha, new Entailment(e, new And(alpha, e)))), new Entailment(e, new Entailment(e, new And(alpha, e)))))))), new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(alpha, new Entailment(new Entailment(e, alpha), new Entailment(new Entailment(e, new Entailment(alpha, new Entailment(e, new And(alpha, e)))), new Entailment(e, new Entailment(e, new And(alpha, e))))))))), null);
        proof.addExpression(new Entailment(new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(new Entailment(new Entailment(e, alpha), new Entailment(new Entailment(e, new Entailment(alpha, new Entailment(e, new And(alpha, e)))), new Entailment(e, new Entailment(e, new And(alpha, e))))), new Entailment(alpha, new Entailment(new Entailment(e, alpha), new Entailment(new Entailment(e, new Entailment(alpha, new Entailment(e, new And(alpha, e)))), new Entailment(e, new Entailment(e, new And(alpha, e)))))))), new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(alpha, new Entailment(new Entailment(e, alpha), new Entailment(new Entailment(e, new Entailment(alpha, new Entailment(e, new And(alpha, e)))), new Entailment(e, new Entailment(e, new And(alpha, e)))))))), null);
        proof.addExpression(new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(alpha, new Entailment(new Entailment(e, alpha), new Entailment(new Entailment(e, new Entailment(alpha, new Entailment(e, new And(alpha, e)))), new Entailment(e, new Entailment(e, new And(alpha, e))))))), null);
        proof.addExpression(new Entailment(new Entailment(alpha, new Entailment(e, alpha)), new Entailment(new Entailment(alpha, new Entailment(new Entailment(e, alpha), new Entailment(new Entailment(e, new Entailment(alpha, new Entailment(e, new And(alpha, e)))), new Entailment(e, new Entailment(e, new And(alpha, e)))))), new Entailment(alpha, new Entailment(new Entailment(e, new Entailment(alpha, new Entailment(e, new And(alpha, e)))), new Entailment(e, new Entailment(e, new And(alpha, e))))))), null);
        proof.addExpression(new Entailment(new Entailment(new Entailment(alpha, new Entailment(e, alpha)), new Entailment(new Entailment(alpha, new Entailment(new Entailment(e, alpha), new Entailment(new Entailment(e, new Entailment(alpha, new Entailment(e, new And(alpha, e)))), new Entailment(e, new Entailment(e, new And(alpha, e)))))), new Entailment(alpha, new Entailment(new Entailment(e, new Entailment(alpha, new Entailment(e, new And(alpha, e)))), new Entailment(e, new Entailment(e, new And(alpha, e))))))), new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(new Entailment(alpha, new Entailment(e, alpha)), new Entailment(new Entailment(alpha, new Entailment(new Entailment(e, alpha), new Entailment(new Entailment(e, new Entailment(alpha, new Entailment(e, new And(alpha, e)))), new Entailment(e, new Entailment(e, new And(alpha, e)))))), new Entailment(alpha, new Entailment(new Entailment(e, new Entailment(alpha, new Entailment(e, new And(alpha, e)))), new Entailment(e, new Entailment(e, new And(alpha, e))))))))), null);
        proof.addExpression(new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(new Entailment(alpha, new Entailment(e, alpha)), new Entailment(new Entailment(alpha, new Entailment(new Entailment(e, alpha), new Entailment(new Entailment(e, new Entailment(alpha, new Entailment(e, new And(alpha, e)))), new Entailment(e, new Entailment(e, new And(alpha, e)))))), new Entailment(alpha, new Entailment(new Entailment(e, new Entailment(alpha, new Entailment(e, new And(alpha, e)))), new Entailment(e, new Entailment(e, new And(alpha, e)))))))), null);
        proof.addExpression(new Entailment(new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(alpha, new Entailment(e, alpha))), new Entailment(new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(new Entailment(alpha, new Entailment(e, alpha)), new Entailment(new Entailment(alpha, new Entailment(new Entailment(e, alpha), new Entailment(new Entailment(e, new Entailment(alpha, new Entailment(e, new And(alpha, e)))), new Entailment(e, new Entailment(e, new And(alpha, e)))))), new Entailment(alpha, new Entailment(new Entailment(e, new Entailment(alpha, new Entailment(e, new And(alpha, e)))), new Entailment(e, new Entailment(e, new And(alpha, e)))))))), new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(new Entailment(alpha, new Entailment(new Entailment(e, alpha), new Entailment(new Entailment(e, new Entailment(alpha, new Entailment(e, new And(alpha, e)))), new Entailment(e, new Entailment(e, new And(alpha, e)))))), new Entailment(alpha, new Entailment(new Entailment(e, new Entailment(alpha, new Entailment(e, new And(alpha, e)))), new Entailment(e, new Entailment(e, new And(alpha, e))))))))), null);
        proof.addExpression(new Entailment(new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(new Entailment(alpha, new Entailment(e, alpha)), new Entailment(new Entailment(alpha, new Entailment(new Entailment(e, alpha), new Entailment(new Entailment(e, new Entailment(alpha, new Entailment(e, new And(alpha, e)))), new Entailment(e, new Entailment(e, new And(alpha, e)))))), new Entailment(alpha, new Entailment(new Entailment(e, new Entailment(alpha, new Entailment(e, new And(alpha, e)))), new Entailment(e, new Entailment(e, new And(alpha, e)))))))), new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(new Entailment(alpha, new Entailment(new Entailment(e, alpha), new Entailment(new Entailment(e, new Entailment(alpha, new Entailment(e, new And(alpha, e)))), new Entailment(e, new Entailment(e, new And(alpha, e)))))), new Entailment(alpha, new Entailment(new Entailment(e, new Entailment(alpha, new Entailment(e, new And(alpha, e)))), new Entailment(e, new Entailment(e, new And(alpha, e)))))))), null);
        proof.addExpression(new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(new Entailment(alpha, new Entailment(new Entailment(e, alpha), new Entailment(new Entailment(e, new Entailment(alpha, new Entailment(e, new And(alpha, e)))), new Entailment(e, new Entailment(e, new And(alpha, e)))))), new Entailment(alpha, new Entailment(new Entailment(e, new Entailment(alpha, new Entailment(e, new And(alpha, e)))), new Entailment(e, new Entailment(e, new And(alpha, e))))))), null);
        proof.addExpression(new Entailment(new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(alpha, new Entailment(e, alpha))), new Entailment(new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(new Entailment(alpha, new Entailment(e, alpha)), new Entailment(new Entailment(alpha, new Entailment(new Entailment(e, alpha), new Entailment(new Entailment(e, new Entailment(alpha, new Entailment(e, new And(alpha, e)))), new Entailment(e, new Entailment(e, new And(alpha, e)))))), new Entailment(alpha, new Entailment(new Entailment(e, new Entailment(alpha, new Entailment(e, new And(alpha, e)))), new Entailment(e, new Entailment(e, new And(alpha, e)))))))), new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(new Entailment(alpha, new Entailment(new Entailment(e, alpha), new Entailment(new Entailment(e, new Entailment(alpha, new Entailment(e, new And(alpha, e)))), new Entailment(e, new Entailment(e, new And(alpha, e)))))), new Entailment(alpha, new Entailment(new Entailment(e, new Entailment(alpha, new Entailment(e, new And(alpha, e)))), new Entailment(e, new Entailment(e, new And(alpha, e))))))))), null);
        proof.addExpression(new Entailment(new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(new Entailment(alpha, new Entailment(e, alpha)), new Entailment(new Entailment(alpha, new Entailment(new Entailment(e, alpha), new Entailment(new Entailment(e, new Entailment(alpha, new Entailment(e, new And(alpha, e)))), new Entailment(e, new Entailment(e, new And(alpha, e)))))), new Entailment(alpha, new Entailment(new Entailment(e, new Entailment(alpha, new Entailment(e, new And(alpha, e)))), new Entailment(e, new Entailment(e, new And(alpha, e)))))))), new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(new Entailment(alpha, new Entailment(new Entailment(e, alpha), new Entailment(new Entailment(e, new Entailment(alpha, new Entailment(e, new And(alpha, e)))), new Entailment(e, new Entailment(e, new And(alpha, e)))))), new Entailment(alpha, new Entailment(new Entailment(e, new Entailment(alpha, new Entailment(e, new And(alpha, e)))), new Entailment(e, new Entailment(e, new And(alpha, e)))))))), null);
        proof.addExpression(new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(new Entailment(alpha, new Entailment(new Entailment(e, alpha), new Entailment(new Entailment(e, new Entailment(alpha, new Entailment(e, new And(alpha, e)))), new Entailment(e, new Entailment(e, new And(alpha, e)))))), new Entailment(alpha, new Entailment(new Entailment(e, new Entailment(alpha, new Entailment(e, new And(alpha, e)))), new Entailment(e, new Entailment(e, new And(alpha, e))))))), null);
        proof.addExpression(new Entailment(new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(alpha, new Entailment(new Entailment(e, alpha), new Entailment(new Entailment(e, new Entailment(alpha, new Entailment(e, new And(alpha, e)))), new Entailment(e, new Entailment(e, new And(alpha, e))))))), new Entailment(new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(new Entailment(alpha, new Entailment(new Entailment(e, alpha), new Entailment(new Entailment(e, new Entailment(alpha, new Entailment(e, new And(alpha, e)))), new Entailment(e, new Entailment(e, new And(alpha, e)))))), new Entailment(alpha, new Entailment(new Entailment(e, new Entailment(alpha, new Entailment(e, new And(alpha, e)))), new Entailment(e, new Entailment(e, new And(alpha, e))))))), new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(alpha, new Entailment(new Entailment(e, new Entailment(alpha, new Entailment(e, new And(alpha, e)))), new Entailment(e, new Entailment(e, new And(alpha, e)))))))), null);
        proof.addExpression(new Entailment(new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(new Entailment(alpha, new Entailment(new Entailment(e, alpha), new Entailment(new Entailment(e, new Entailment(alpha, new Entailment(e, new And(alpha, e)))), new Entailment(e, new Entailment(e, new And(alpha, e)))))), new Entailment(alpha, new Entailment(new Entailment(e, new Entailment(alpha, new Entailment(e, new And(alpha, e)))), new Entailment(e, new Entailment(e, new And(alpha, e))))))), new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(alpha, new Entailment(new Entailment(e, new Entailment(alpha, new Entailment(e, new And(alpha, e)))), new Entailment(e, new Entailment(e, new And(alpha, e))))))), null);
        proof.addExpression(new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(alpha, new Entailment(new Entailment(e, new Entailment(alpha, new Entailment(e, new And(alpha, e)))), new Entailment(e, new Entailment(e, new And(alpha, e)))))), null);
        proof.addExpression(new Entailment(new Entailment(alpha, new Entailment(e, new Entailment(alpha, new Entailment(e, new And(alpha, e))))), new Entailment(new Entailment(alpha, new Entailment(new Entailment(e, new Entailment(alpha, new Entailment(e, new And(alpha, e)))), new Entailment(e, new Entailment(e, new And(alpha, e))))), new Entailment(alpha, new Entailment(e, new Entailment(e, new And(alpha, e)))))), null);
        proof.addExpression(new Entailment(new Entailment(new Entailment(alpha, new Entailment(e, new Entailment(alpha, new Entailment(e, new And(alpha, e))))), new Entailment(new Entailment(alpha, new Entailment(new Entailment(e, new Entailment(alpha, new Entailment(e, new And(alpha, e)))), new Entailment(e, new Entailment(e, new And(alpha, e))))), new Entailment(alpha, new Entailment(e, new Entailment(e, new And(alpha, e)))))), new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(new Entailment(alpha, new Entailment(e, new Entailment(alpha, new Entailment(e, new And(alpha, e))))), new Entailment(new Entailment(alpha, new Entailment(new Entailment(e, new Entailment(alpha, new Entailment(e, new And(alpha, e)))), new Entailment(e, new Entailment(e, new And(alpha, e))))), new Entailment(alpha, new Entailment(e, new Entailment(e, new And(alpha, e)))))))), null);
        proof.addExpression(new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(new Entailment(alpha, new Entailment(e, new Entailment(alpha, new Entailment(e, new And(alpha, e))))), new Entailment(new Entailment(alpha, new Entailment(new Entailment(e, new Entailment(alpha, new Entailment(e, new And(alpha, e)))), new Entailment(e, new Entailment(e, new And(alpha, e))))), new Entailment(alpha, new Entailment(e, new Entailment(e, new And(alpha, e))))))), null);
        proof.addExpression(new Entailment(new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(alpha, new Entailment(e, new Entailment(alpha, new Entailment(e, new And(alpha, e)))))), new Entailment(new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(new Entailment(alpha, new Entailment(e, new Entailment(alpha, new Entailment(e, new And(alpha, e))))), new Entailment(new Entailment(alpha, new Entailment(new Entailment(e, new Entailment(alpha, new Entailment(e, new And(alpha, e)))), new Entailment(e, new Entailment(e, new And(alpha, e))))), new Entailment(alpha, new Entailment(e, new Entailment(e, new And(alpha, e))))))), new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(new Entailment(alpha, new Entailment(new Entailment(e, new Entailment(alpha, new Entailment(e, new And(alpha, e)))), new Entailment(e, new Entailment(e, new And(alpha, e))))), new Entailment(alpha, new Entailment(e, new Entailment(e, new And(alpha, e)))))))), null);
        proof.addExpression(new Entailment(new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(new Entailment(alpha, new Entailment(e, new Entailment(alpha, new Entailment(e, new And(alpha, e))))), new Entailment(new Entailment(alpha, new Entailment(new Entailment(e, new Entailment(alpha, new Entailment(e, new And(alpha, e)))), new Entailment(e, new Entailment(e, new And(alpha, e))))), new Entailment(alpha, new Entailment(e, new Entailment(e, new And(alpha, e))))))), new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(new Entailment(alpha, new Entailment(new Entailment(e, new Entailment(alpha, new Entailment(e, new And(alpha, e)))), new Entailment(e, new Entailment(e, new And(alpha, e))))), new Entailment(alpha, new Entailment(e, new Entailment(e, new And(alpha, e))))))), null);
        proof.addExpression(new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(new Entailment(alpha, new Entailment(new Entailment(e, new Entailment(alpha, new Entailment(e, new And(alpha, e)))), new Entailment(e, new Entailment(e, new And(alpha, e))))), new Entailment(alpha, new Entailment(e, new Entailment(e, new And(alpha, e)))))), null);
        proof.addExpression(new Entailment(new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(alpha, new Entailment(new Entailment(e, new Entailment(alpha, new Entailment(e, new And(alpha, e)))), new Entailment(e, new Entailment(e, new And(alpha, e)))))), new Entailment(new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(new Entailment(alpha, new Entailment(new Entailment(e, new Entailment(alpha, new Entailment(e, new And(alpha, e)))), new Entailment(e, new Entailment(e, new And(alpha, e))))), new Entailment(alpha, new Entailment(e, new Entailment(e, new And(alpha, e)))))), new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(alpha, new Entailment(e, new Entailment(e, new And(alpha, e))))))), null);
        proof.addExpression(new Entailment(new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(new Entailment(alpha, new Entailment(new Entailment(e, new Entailment(alpha, new Entailment(e, new And(alpha, e)))), new Entailment(e, new Entailment(e, new And(alpha, e))))), new Entailment(alpha, new Entailment(e, new Entailment(e, new And(alpha, e)))))), new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(alpha, new Entailment(e, new Entailment(e, new And(alpha, e)))))), null);
        proof.addExpression(new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(alpha, new Entailment(e, new Entailment(e, new And(alpha, e))))), null);
        proof.addExpression(new Entailment(new Entailment(e, e), new Entailment(new Entailment(e, new Entailment(e, new And(alpha, e))), new Entailment(e, new And(alpha, e)))), null);
        proof.addExpression(new Entailment(new Entailment(new Entailment(e, e), new Entailment(new Entailment(e, new Entailment(e, new And(alpha, e))), new Entailment(e, new And(alpha, e)))), new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(new Entailment(e, e), new Entailment(new Entailment(e, new Entailment(e, new And(alpha, e))), new Entailment(e, new And(alpha, e)))))), null);
        proof.addExpression(new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(new Entailment(e, e), new Entailment(new Entailment(e, new Entailment(e, new And(alpha, e))), new Entailment(e, new And(alpha, e))))), null);
        proof.addExpression(new Entailment(new Entailment(new Entailment(e, e), new Entailment(new Entailment(e, new Entailment(e, new And(alpha, e))), new Entailment(e, new And(alpha, e)))), new Entailment(alpha, new Entailment(new Entailment(e, e), new Entailment(new Entailment(e, new Entailment(e, new And(alpha, e))), new Entailment(e, new And(alpha, e)))))), null);
        proof.addExpression(new Entailment(new Entailment(new Entailment(new Entailment(e, e), new Entailment(new Entailment(e, new Entailment(e, new And(alpha, e))), new Entailment(e, new And(alpha, e)))), new Entailment(alpha, new Entailment(new Entailment(e, e), new Entailment(new Entailment(e, new Entailment(e, new And(alpha, e))), new Entailment(e, new And(alpha, e)))))), new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(new Entailment(new Entailment(e, e), new Entailment(new Entailment(e, new Entailment(e, new And(alpha, e))), new Entailment(e, new And(alpha, e)))), new Entailment(alpha, new Entailment(new Entailment(e, e), new Entailment(new Entailment(e, new Entailment(e, new And(alpha, e))), new Entailment(e, new And(alpha, e)))))))), null);
        proof.addExpression(new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(new Entailment(new Entailment(e, e), new Entailment(new Entailment(e, new Entailment(e, new And(alpha, e))), new Entailment(e, new And(alpha, e)))), new Entailment(alpha, new Entailment(new Entailment(e, e), new Entailment(new Entailment(e, new Entailment(e, new And(alpha, e))), new Entailment(e, new And(alpha, e))))))), null);
        proof.addExpression(new Entailment(new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(new Entailment(e, e), new Entailment(new Entailment(e, new Entailment(e, new And(alpha, e))), new Entailment(e, new And(alpha, e))))), new Entailment(new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(new Entailment(new Entailment(e, e), new Entailment(new Entailment(e, new Entailment(e, new And(alpha, e))), new Entailment(e, new And(alpha, e)))), new Entailment(alpha, new Entailment(new Entailment(e, e), new Entailment(new Entailment(e, new Entailment(e, new And(alpha, e))), new Entailment(e, new And(alpha, e))))))), new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(alpha, new Entailment(new Entailment(e, e), new Entailment(new Entailment(e, new Entailment(e, new And(alpha, e))), new Entailment(e, new And(alpha, e)))))))), null);
        proof.addExpression(new Entailment(new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(new Entailment(new Entailment(e, e), new Entailment(new Entailment(e, new Entailment(e, new And(alpha, e))), new Entailment(e, new And(alpha, e)))), new Entailment(alpha, new Entailment(new Entailment(e, e), new Entailment(new Entailment(e, new Entailment(e, new And(alpha, e))), new Entailment(e, new And(alpha, e))))))), new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(alpha, new Entailment(new Entailment(e, e), new Entailment(new Entailment(e, new Entailment(e, new And(alpha, e))), new Entailment(e, new And(alpha, e))))))), null);
        proof.addExpression(new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(alpha, new Entailment(new Entailment(e, e), new Entailment(new Entailment(e, new Entailment(e, new And(alpha, e))), new Entailment(e, new And(alpha, e)))))), null);
        proof.addExpression(new Entailment(new Entailment(alpha, new Entailment(e, e)), new Entailment(new Entailment(alpha, new Entailment(new Entailment(e, e), new Entailment(new Entailment(e, new Entailment(e, new And(alpha, e))), new Entailment(e, new And(alpha, e))))), new Entailment(alpha, new Entailment(new Entailment(e, new Entailment(e, new And(alpha, e))), new Entailment(e, new And(alpha, e)))))), null);
        proof.addExpression(new Entailment(new Entailment(new Entailment(alpha, new Entailment(e, e)), new Entailment(new Entailment(alpha, new Entailment(new Entailment(e, e), new Entailment(new Entailment(e, new Entailment(e, new And(alpha, e))), new Entailment(e, new And(alpha, e))))), new Entailment(alpha, new Entailment(new Entailment(e, new Entailment(e, new And(alpha, e))), new Entailment(e, new And(alpha, e)))))), new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(new Entailment(alpha, new Entailment(e, e)), new Entailment(new Entailment(alpha, new Entailment(new Entailment(e, e), new Entailment(new Entailment(e, new Entailment(e, new And(alpha, e))), new Entailment(e, new And(alpha, e))))), new Entailment(alpha, new Entailment(new Entailment(e, new Entailment(e, new And(alpha, e))), new Entailment(e, new And(alpha, e)))))))), null);
        proof.addExpression(new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(new Entailment(alpha, new Entailment(e, e)), new Entailment(new Entailment(alpha, new Entailment(new Entailment(e, e), new Entailment(new Entailment(e, new Entailment(e, new And(alpha, e))), new Entailment(e, new And(alpha, e))))), new Entailment(alpha, new Entailment(new Entailment(e, new Entailment(e, new And(alpha, e))), new Entailment(e, new And(alpha, e))))))), null);
        proof.addExpression(new Entailment(new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(alpha, new Entailment(e, e))), new Entailment(new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(new Entailment(alpha, new Entailment(e, e)), new Entailment(new Entailment(alpha, new Entailment(new Entailment(e, e), new Entailment(new Entailment(e, new Entailment(e, new And(alpha, e))), new Entailment(e, new And(alpha, e))))), new Entailment(alpha, new Entailment(new Entailment(e, new Entailment(e, new And(alpha, e))), new Entailment(e, new And(alpha, e))))))), new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(new Entailment(alpha, new Entailment(new Entailment(e, e), new Entailment(new Entailment(e, new Entailment(e, new And(alpha, e))), new Entailment(e, new And(alpha, e))))), new Entailment(alpha, new Entailment(new Entailment(e, new Entailment(e, new And(alpha, e))), new Entailment(e, new And(alpha, e)))))))), null);
        proof.addExpression(new Entailment(new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(new Entailment(alpha, new Entailment(e, e)), new Entailment(new Entailment(alpha, new Entailment(new Entailment(e, e), new Entailment(new Entailment(e, new Entailment(e, new And(alpha, e))), new Entailment(e, new And(alpha, e))))), new Entailment(alpha, new Entailment(new Entailment(e, new Entailment(e, new And(alpha, e))), new Entailment(e, new And(alpha, e))))))), new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(new Entailment(alpha, new Entailment(new Entailment(e, e), new Entailment(new Entailment(e, new Entailment(e, new And(alpha, e))), new Entailment(e, new And(alpha, e))))), new Entailment(alpha, new Entailment(new Entailment(e, new Entailment(e, new And(alpha, e))), new Entailment(e, new And(alpha, e))))))), null);
        proof.addExpression(new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(new Entailment(alpha, new Entailment(new Entailment(e, e), new Entailment(new Entailment(e, new Entailment(e, new And(alpha, e))), new Entailment(e, new And(alpha, e))))), new Entailment(alpha, new Entailment(new Entailment(e, new Entailment(e, new And(alpha, e))), new Entailment(e, new And(alpha, e)))))), null);
        proof.addExpression(new Entailment(new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(alpha, new Entailment(new Entailment(e, e), new Entailment(new Entailment(e, new Entailment(e, new And(alpha, e))), new Entailment(e, new And(alpha, e)))))), new Entailment(new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(new Entailment(alpha, new Entailment(new Entailment(e, e), new Entailment(new Entailment(e, new Entailment(e, new And(alpha, e))), new Entailment(e, new And(alpha, e))))), new Entailment(alpha, new Entailment(new Entailment(e, new Entailment(e, new And(alpha, e))), new Entailment(e, new And(alpha, e)))))), new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(alpha, new Entailment(new Entailment(e, new Entailment(e, new And(alpha, e))), new Entailment(e, new And(alpha, e))))))), null);
        proof.addExpression(new Entailment(new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(new Entailment(alpha, new Entailment(new Entailment(e, e), new Entailment(new Entailment(e, new Entailment(e, new And(alpha, e))), new Entailment(e, new And(alpha, e))))), new Entailment(alpha, new Entailment(new Entailment(e, new Entailment(e, new And(alpha, e))), new Entailment(e, new And(alpha, e)))))), new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(alpha, new Entailment(new Entailment(e, new Entailment(e, new And(alpha, e))), new Entailment(e, new And(alpha, e)))))), null);
        proof.addExpression(new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(alpha, new Entailment(new Entailment(e, new Entailment(e, new And(alpha, e))), new Entailment(e, new And(alpha, e))))), null);
        proof.addExpression(new Entailment(new Entailment(alpha, new Entailment(e, new Entailment(e, new And(alpha, e)))), new Entailment(new Entailment(alpha, new Entailment(new Entailment(e, new Entailment(e, new And(alpha, e))), new Entailment(e, new And(alpha, e)))), new Entailment(alpha, new Entailment(e, new And(alpha, e))))), null);
        proof.addExpression(new Entailment(new Entailment(new Entailment(alpha, new Entailment(e, new Entailment(e, new And(alpha, e)))), new Entailment(new Entailment(alpha, new Entailment(new Entailment(e, new Entailment(e, new And(alpha, e))), new Entailment(e, new And(alpha, e)))), new Entailment(alpha, new Entailment(e, new And(alpha, e))))), new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(new Entailment(alpha, new Entailment(e, new Entailment(e, new And(alpha, e)))), new Entailment(new Entailment(alpha, new Entailment(new Entailment(e, new Entailment(e, new And(alpha, e))), new Entailment(e, new And(alpha, e)))), new Entailment(alpha, new Entailment(e, new And(alpha, e))))))), null);
        proof.addExpression(new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(new Entailment(alpha, new Entailment(e, new Entailment(e, new And(alpha, e)))), new Entailment(new Entailment(alpha, new Entailment(new Entailment(e, new Entailment(e, new And(alpha, e))), new Entailment(e, new And(alpha, e)))), new Entailment(alpha, new Entailment(e, new And(alpha, e)))))), null);
        proof.addExpression(new Entailment(new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(alpha, new Entailment(e, new Entailment(e, new And(alpha, e))))), new Entailment(new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(new Entailment(alpha, new Entailment(e, new Entailment(e, new And(alpha, e)))), new Entailment(new Entailment(alpha, new Entailment(new Entailment(e, new Entailment(e, new And(alpha, e))), new Entailment(e, new And(alpha, e)))), new Entailment(alpha, new Entailment(e, new And(alpha, e)))))), new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(new Entailment(alpha, new Entailment(new Entailment(e, new Entailment(e, new And(alpha, e))), new Entailment(e, new And(alpha, e)))), new Entailment(alpha, new Entailment(e, new And(alpha, e))))))), null);
        proof.addExpression(new Entailment(new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(new Entailment(alpha, new Entailment(e, new Entailment(e, new And(alpha, e)))), new Entailment(new Entailment(alpha, new Entailment(new Entailment(e, new Entailment(e, new And(alpha, e))), new Entailment(e, new And(alpha, e)))), new Entailment(alpha, new Entailment(e, new And(alpha, e)))))), new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(new Entailment(alpha, new Entailment(new Entailment(e, new Entailment(e, new And(alpha, e))), new Entailment(e, new And(alpha, e)))), new Entailment(alpha, new Entailment(e, new And(alpha, e)))))), null);
        proof.addExpression(new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(new Entailment(alpha, new Entailment(new Entailment(e, new Entailment(e, new And(alpha, e))), new Entailment(e, new And(alpha, e)))), new Entailment(alpha, new Entailment(e, new And(alpha, e))))), null);
        proof.addExpression(new Entailment(alpha, new Entailment(e, new And(alpha, e))), null);
        proof.addExpression(new Entailment(new Entailment(alpha, new Entailment(e, new And(alpha, e))), new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(alpha, new Entailment(e, new And(alpha, e))))), null);
        proof.addExpression(new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(alpha, new Entailment(e, new And(alpha, e)))), null);
        proof.addExpression(new Entailment(new Entailment(alpha, alpha), new Entailment(new Entailment(alpha, new Entailment(alpha, new Entailment(e, new And(alpha, e)))), new Entailment(alpha, new Entailment(e, new And(alpha, e))))), null);
        proof.addExpression(new Entailment(new Entailment(new Entailment(alpha, alpha), new Entailment(new Entailment(alpha, new Entailment(alpha, new Entailment(e, new And(alpha, e)))), new Entailment(alpha, new Entailment(e, new And(alpha, e))))), new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(new Entailment(alpha, alpha), new Entailment(new Entailment(alpha, new Entailment(alpha, new Entailment(e, new And(alpha, e)))), new Entailment(alpha, new Entailment(e, new And(alpha, e))))))), null);
        proof.addExpression(new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(new Entailment(alpha, alpha), new Entailment(new Entailment(alpha, new Entailment(alpha, new Entailment(e, new And(alpha, e)))), new Entailment(alpha, new Entailment(e, new And(alpha, e)))))), null);
        proof.addExpression(new Entailment(new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(alpha, alpha)), new Entailment(new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(new Entailment(alpha, alpha), new Entailment(new Entailment(alpha, new Entailment(alpha, new Entailment(e, new And(alpha, e)))), new Entailment(alpha, new Entailment(e, new And(alpha, e)))))), new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(new Entailment(alpha, new Entailment(alpha, new Entailment(e, new And(alpha, e)))), new Entailment(alpha, new Entailment(e, new And(alpha, e))))))), null);
        proof.addExpression(new Entailment(new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(new Entailment(alpha, alpha), new Entailment(new Entailment(alpha, new Entailment(alpha, new Entailment(e, new And(alpha, e)))), new Entailment(alpha, new Entailment(e, new And(alpha, e)))))), new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(new Entailment(alpha, new Entailment(alpha, new Entailment(e, new And(alpha, e)))), new Entailment(alpha, new Entailment(e, new And(alpha, e)))))), null);
        proof.addExpression(new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(new Entailment(alpha, new Entailment(alpha, new Entailment(e, new And(alpha, e)))), new Entailment(alpha, new Entailment(e, new And(alpha, e))))), null);
        proof.addExpression(new Entailment(alpha, new Entailment(e, new And(alpha, e))), null);
        proof.addExpression(new Entailment(new Entailment(alpha, new Entailment(e, new And(alpha, e))), new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(alpha, new Entailment(e, new And(alpha, e))))), null);
        proof.addExpression(new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(alpha, new Entailment(e, new And(alpha, e)))), null);
        proof.addExpression(new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(new And(alpha, e), new ForAll(variable,e1)))), null);
        proof.addExpression(new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(new And(alpha, e), new ForAll(variable,e1))), new Entailment(new And(alpha, e), new ForAll(variable,e1)))), null);
        proof.addExpression(new Entailment(new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(new And(alpha, e), new ForAll(variable,e1)))), new Entailment(new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(new And(alpha, e), new ForAll(variable,e1))), new Entailment(new And(alpha, e), new ForAll(variable,e1)))), new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(new And(alpha, e), new ForAll(variable,e1))))), null);
        proof.addExpression(new Entailment(new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(new And(alpha, e), new ForAll(variable,e1))), new Entailment(new And(alpha, e), new ForAll(variable,e1)))), new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(new And(alpha, e), new ForAll(variable,e1)))), null);
        proof.addExpression(new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(new And(alpha, e), new ForAll(variable,e1))), null);
        proof.addExpression(new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(alpha, new Entailment(new And(alpha, e), new ForAll(variable,e1)))), null);
        proof.addExpression(new Entailment(new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(alpha, new Entailment(new And(alpha, e), new ForAll(variable,e1)))), new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(alpha, new Entailment(new And(alpha, e), new ForAll(variable,e1)))))), null);
        proof.addExpression(new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(alpha, new Entailment(new And(alpha, e), new ForAll(variable,e1))))), null);
        proof.addExpression(new Entailment(new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(new And(alpha, e), new ForAll(variable,e1))), new Entailment(new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(alpha, new Entailment(new And(alpha, e), new ForAll(variable,e1))))), new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(alpha, new Entailment(new And(alpha, e), new ForAll(variable,e1)))))), null);
        proof.addExpression(new Entailment(new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(alpha, new Entailment(new And(alpha, e), new ForAll(variable,e1))))), new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(alpha, new Entailment(new And(alpha, e), new ForAll(variable,e1))))), null);
        proof.addExpression(new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(alpha, new Entailment(new And(alpha, e), new ForAll(variable,e1)))), null);
        proof.addExpression(new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(e, new Entailment(new And(alpha, e), new ForAll(variable,e1)))), null);
        proof.addExpression(new Entailment(new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(e, new Entailment(new And(alpha, e), new ForAll(variable,e1)))), new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(e, new Entailment(new And(alpha, e), new ForAll(variable,e1)))))), null);
        proof.addExpression(new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(e, new Entailment(new And(alpha, e), new ForAll(variable,e1))))), null);
        proof.addExpression(new Entailment(new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(e, new Entailment(new And(alpha, e), new ForAll(variable,e1)))), new Entailment(alpha, new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(e, new Entailment(new And(alpha, e), new ForAll(variable,e1)))))), null);
        proof.addExpression(new Entailment(new Entailment(new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(e, new Entailment(new And(alpha, e), new ForAll(variable,e1)))), new Entailment(alpha, new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(e, new Entailment(new And(alpha, e), new ForAll(variable,e1)))))), new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(e, new Entailment(new And(alpha, e), new ForAll(variable,e1)))), new Entailment(alpha, new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(e, new Entailment(new And(alpha, e), new ForAll(variable,e1)))))))), null);
        proof.addExpression(new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(e, new Entailment(new And(alpha, e), new ForAll(variable,e1)))), new Entailment(alpha, new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(e, new Entailment(new And(alpha, e), new ForAll(variable,e1))))))), null);
        proof.addExpression(new Entailment(new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(e, new Entailment(new And(alpha, e), new ForAll(variable,e1))))), new Entailment(new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(e, new Entailment(new And(alpha, e), new ForAll(variable,e1)))), new Entailment(alpha, new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(e, new Entailment(new And(alpha, e), new ForAll(variable,e1))))))), new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(alpha, new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(e, new Entailment(new And(alpha, e), new ForAll(variable,e1)))))))), null);
        proof.addExpression(new Entailment(new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(e, new Entailment(new And(alpha, e), new ForAll(variable,e1)))), new Entailment(alpha, new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(e, new Entailment(new And(alpha, e), new ForAll(variable,e1))))))), new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(alpha, new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(e, new Entailment(new And(alpha, e), new ForAll(variable,e1))))))), null);
        proof.addExpression(new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(alpha, new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(e, new Entailment(new And(alpha, e), new ForAll(variable,e1)))))), null);
        proof.addExpression(new Entailment(new Entailment(alpha, new Entailment(new And(alpha, e), new ForAll(variable,e1))), new Entailment(new Entailment(alpha, new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(e, new Entailment(new And(alpha, e), new ForAll(variable,e1))))), new Entailment(alpha, new Entailment(e, new Entailment(new And(alpha, e), new ForAll(variable,e1)))))), null);
        proof.addExpression(new Entailment(new Entailment(new Entailment(alpha, new Entailment(new And(alpha, e), new ForAll(variable,e1))), new Entailment(new Entailment(alpha, new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(e, new Entailment(new And(alpha, e), new ForAll(variable,e1))))), new Entailment(alpha, new Entailment(e, new Entailment(new And(alpha, e), new ForAll(variable,e1)))))), new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(new Entailment(alpha, new Entailment(new And(alpha, e), new ForAll(variable,e1))), new Entailment(new Entailment(alpha, new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(e, new Entailment(new And(alpha, e), new ForAll(variable,e1))))), new Entailment(alpha, new Entailment(e, new Entailment(new And(alpha, e), new ForAll(variable,e1)))))))), null);
        proof.addExpression(new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(new Entailment(alpha, new Entailment(new And(alpha, e), new ForAll(variable,e1))), new Entailment(new Entailment(alpha, new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(e, new Entailment(new And(alpha, e), new ForAll(variable,e1))))), new Entailment(alpha, new Entailment(e, new Entailment(new And(alpha, e), new ForAll(variable,e1))))))), null);
        proof.addExpression(new Entailment(new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(alpha, new Entailment(new And(alpha, e), new ForAll(variable,e1)))), new Entailment(new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(new Entailment(alpha, new Entailment(new And(alpha, e), new ForAll(variable,e1))), new Entailment(new Entailment(alpha, new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(e, new Entailment(new And(alpha, e), new ForAll(variable,e1))))), new Entailment(alpha, new Entailment(e, new Entailment(new And(alpha, e), new ForAll(variable,e1))))))), new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(new Entailment(alpha, new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(e, new Entailment(new And(alpha, e), new ForAll(variable,e1))))), new Entailment(alpha, new Entailment(e, new Entailment(new And(alpha, e), new ForAll(variable,e1)))))))), null);
        proof.addExpression(new Entailment(new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(new Entailment(alpha, new Entailment(new And(alpha, e), new ForAll(variable,e1))), new Entailment(new Entailment(alpha, new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(e, new Entailment(new And(alpha, e), new ForAll(variable,e1))))), new Entailment(alpha, new Entailment(e, new Entailment(new And(alpha, e), new ForAll(variable,e1))))))), new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(new Entailment(alpha, new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(e, new Entailment(new And(alpha, e), new ForAll(variable,e1))))), new Entailment(alpha, new Entailment(e, new Entailment(new And(alpha, e), new ForAll(variable,e1))))))), null);
        proof.addExpression(new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(new Entailment(alpha, new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(e, new Entailment(new And(alpha, e), new ForAll(variable,e1))))), new Entailment(alpha, new Entailment(e, new Entailment(new And(alpha, e), new ForAll(variable,e1)))))), null);
        proof.addExpression(new Entailment(new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(alpha, new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(e, new Entailment(new And(alpha, e), new ForAll(variable,e1)))))), new Entailment(new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(new Entailment(alpha, new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(e, new Entailment(new And(alpha, e), new ForAll(variable,e1))))), new Entailment(alpha, new Entailment(e, new Entailment(new And(alpha, e), new ForAll(variable,e1)))))), new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(alpha, new Entailment(e, new Entailment(new And(alpha, e), new ForAll(variable,e1))))))), null);
        proof.addExpression(new Entailment(new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(new Entailment(alpha, new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(e, new Entailment(new And(alpha, e), new ForAll(variable,e1))))), new Entailment(alpha, new Entailment(e, new Entailment(new And(alpha, e), new ForAll(variable,e1)))))), new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(alpha, new Entailment(e, new Entailment(new And(alpha, e), new ForAll(variable,e1)))))), null);
        proof.addExpression(new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(alpha, new Entailment(e, new Entailment(new And(alpha, e), new ForAll(variable,e1))))), null);
        proof.addExpression(new Entailment(new Entailment(e, new And(alpha, e)), new Entailment(new Entailment(e, new Entailment(new And(alpha, e), new ForAll(variable,e1))), new Entailment(e, new ForAll(variable,e1)))), null);
        proof.addExpression(new Entailment(new Entailment(new Entailment(e, new And(alpha, e)), new Entailment(new Entailment(e, new Entailment(new And(alpha, e), new ForAll(variable,e1))), new Entailment(e, new ForAll(variable,e1)))), new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(new Entailment(e, new And(alpha, e)), new Entailment(new Entailment(e, new Entailment(new And(alpha, e), new ForAll(variable,e1))), new Entailment(e, new ForAll(variable,e1)))))), null);
        proof.addExpression(new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(new Entailment(e, new And(alpha, e)), new Entailment(new Entailment(e, new Entailment(new And(alpha, e), new ForAll(variable,e1))), new Entailment(e, new ForAll(variable,e1))))), null);
        proof.addExpression(new Entailment(new Entailment(new Entailment(e, new And(alpha, e)), new Entailment(new Entailment(e, new Entailment(new And(alpha, e), new ForAll(variable,e1))), new Entailment(e, new ForAll(variable,e1)))), new Entailment(alpha, new Entailment(new Entailment(e, new And(alpha, e)), new Entailment(new Entailment(e, new Entailment(new And(alpha, e), new ForAll(variable,e1))), new Entailment(e, new ForAll(variable,e1)))))), null);
        proof.addExpression(new Entailment(new Entailment(new Entailment(new Entailment(e, new And(alpha, e)), new Entailment(new Entailment(e, new Entailment(new And(alpha, e), new ForAll(variable,e1))), new Entailment(e, new ForAll(variable,e1)))), new Entailment(alpha, new Entailment(new Entailment(e, new And(alpha, e)), new Entailment(new Entailment(e, new Entailment(new And(alpha, e), new ForAll(variable,e1))), new Entailment(e, new ForAll(variable,e1)))))), new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(new Entailment(new Entailment(e, new And(alpha, e)), new Entailment(new Entailment(e, new Entailment(new And(alpha, e), new ForAll(variable,e1))), new Entailment(e, new ForAll(variable,e1)))), new Entailment(alpha, new Entailment(new Entailment(e, new And(alpha, e)), new Entailment(new Entailment(e, new Entailment(new And(alpha, e), new ForAll(variable,e1))), new Entailment(e, new ForAll(variable,e1)))))))), null);
        proof.addExpression(new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(new Entailment(new Entailment(e, new And(alpha, e)), new Entailment(new Entailment(e, new Entailment(new And(alpha, e), new ForAll(variable,e1))), new Entailment(e, new ForAll(variable,e1)))), new Entailment(alpha, new Entailment(new Entailment(e, new And(alpha, e)), new Entailment(new Entailment(e, new Entailment(new And(alpha, e), new ForAll(variable,e1))), new Entailment(e, new ForAll(variable,e1))))))), null);
        proof.addExpression(new Entailment(new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(new Entailment(e, new And(alpha, e)), new Entailment(new Entailment(e, new Entailment(new And(alpha, e), new ForAll(variable,e1))), new Entailment(e, new ForAll(variable,e1))))), new Entailment(new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(new Entailment(new Entailment(e, new And(alpha, e)), new Entailment(new Entailment(e, new Entailment(new And(alpha, e), new ForAll(variable,e1))), new Entailment(e, new ForAll(variable,e1)))), new Entailment(alpha, new Entailment(new Entailment(e, new And(alpha, e)), new Entailment(new Entailment(e, new Entailment(new And(alpha, e), new ForAll(variable,e1))), new Entailment(e, new ForAll(variable,e1))))))), new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(alpha, new Entailment(new Entailment(e, new And(alpha, e)), new Entailment(new Entailment(e, new Entailment(new And(alpha, e), new ForAll(variable,e1))), new Entailment(e, new ForAll(variable,e1)))))))), null);
        proof.addExpression(new Entailment(new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(new Entailment(new Entailment(e, new And(alpha, e)), new Entailment(new Entailment(e, new Entailment(new And(alpha, e), new ForAll(variable,e1))), new Entailment(e, new ForAll(variable,e1)))), new Entailment(alpha, new Entailment(new Entailment(e, new And(alpha, e)), new Entailment(new Entailment(e, new Entailment(new And(alpha, e), new ForAll(variable,e1))), new Entailment(e, new ForAll(variable,e1))))))), new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(alpha, new Entailment(new Entailment(e, new And(alpha, e)), new Entailment(new Entailment(e, new Entailment(new And(alpha, e), new ForAll(variable,e1))), new Entailment(e, new ForAll(variable,e1))))))), null);
        proof.addExpression(new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(alpha, new Entailment(new Entailment(e, new And(alpha, e)), new Entailment(new Entailment(e, new Entailment(new And(alpha, e), new ForAll(variable,e1))), new Entailment(e, new ForAll(variable,e1)))))), null);
        proof.addExpression(new Entailment(new Entailment(alpha, new Entailment(e, new And(alpha, e))), new Entailment(new Entailment(alpha, new Entailment(new Entailment(e, new And(alpha, e)), new Entailment(new Entailment(e, new Entailment(new And(alpha, e), new ForAll(variable,e1))), new Entailment(e, new ForAll(variable,e1))))), new Entailment(alpha, new Entailment(new Entailment(e, new Entailment(new And(alpha, e), new ForAll(variable,e1))), new Entailment(e, new ForAll(variable,e1)))))), null);
        proof.addExpression(new Entailment(new Entailment(new Entailment(alpha, new Entailment(e, new And(alpha, e))), new Entailment(new Entailment(alpha, new Entailment(new Entailment(e, new And(alpha, e)), new Entailment(new Entailment(e, new Entailment(new And(alpha, e), new ForAll(variable,e1))), new Entailment(e, new ForAll(variable,e1))))), new Entailment(alpha, new Entailment(new Entailment(e, new Entailment(new And(alpha, e), new ForAll(variable,e1))), new Entailment(e, new ForAll(variable,e1)))))), new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(new Entailment(alpha, new Entailment(e, new And(alpha, e))), new Entailment(new Entailment(alpha, new Entailment(new Entailment(e, new And(alpha, e)), new Entailment(new Entailment(e, new Entailment(new And(alpha, e), new ForAll(variable,e1))), new Entailment(e, new ForAll(variable,e1))))), new Entailment(alpha, new Entailment(new Entailment(e, new Entailment(new And(alpha, e), new ForAll(variable,e1))), new Entailment(e, new ForAll(variable,e1)))))))), null);
        proof.addExpression(new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(new Entailment(alpha, new Entailment(e, new And(alpha, e))), new Entailment(new Entailment(alpha, new Entailment(new Entailment(e, new And(alpha, e)), new Entailment(new Entailment(e, new Entailment(new And(alpha, e), new ForAll(variable,e1))), new Entailment(e, new ForAll(variable,e1))))), new Entailment(alpha, new Entailment(new Entailment(e, new Entailment(new And(alpha, e), new ForAll(variable,e1))), new Entailment(e, new ForAll(variable,e1))))))), null);
        proof.addExpression(new Entailment(new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(alpha, new Entailment(e, new And(alpha, e)))), new Entailment(new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(new Entailment(alpha, new Entailment(e, new And(alpha, e))), new Entailment(new Entailment(alpha, new Entailment(new Entailment(e, new And(alpha, e)), new Entailment(new Entailment(e, new Entailment(new And(alpha, e), new ForAll(variable,e1))), new Entailment(e, new ForAll(variable,e1))))), new Entailment(alpha, new Entailment(new Entailment(e, new Entailment(new And(alpha, e), new ForAll(variable,e1))), new Entailment(e, new ForAll(variable,e1))))))), new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(new Entailment(alpha, new Entailment(new Entailment(e, new And(alpha, e)), new Entailment(new Entailment(e, new Entailment(new And(alpha, e), new ForAll(variable,e1))), new Entailment(e, new ForAll(variable,e1))))), new Entailment(alpha, new Entailment(new Entailment(e, new Entailment(new And(alpha, e), new ForAll(variable,e1))), new Entailment(e, new ForAll(variable,e1)))))))), null);
        proof.addExpression(new Entailment(new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(new Entailment(alpha, new Entailment(e, new And(alpha, e))), new Entailment(new Entailment(alpha, new Entailment(new Entailment(e, new And(alpha, e)), new Entailment(new Entailment(e, new Entailment(new And(alpha, e), new ForAll(variable,e1))), new Entailment(e, new ForAll(variable,e1))))), new Entailment(alpha, new Entailment(new Entailment(e, new Entailment(new And(alpha, e), new ForAll(variable,e1))), new Entailment(e, new ForAll(variable,e1))))))), new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(new Entailment(alpha, new Entailment(new Entailment(e, new And(alpha, e)), new Entailment(new Entailment(e, new Entailment(new And(alpha, e), new ForAll(variable,e1))), new Entailment(e, new ForAll(variable,e1))))), new Entailment(alpha, new Entailment(new Entailment(e, new Entailment(new And(alpha, e), new ForAll(variable,e1))), new Entailment(e, new ForAll(variable,e1))))))), null);
        proof.addExpression(new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(new Entailment(alpha, new Entailment(new Entailment(e, new And(alpha, e)), new Entailment(new Entailment(e, new Entailment(new And(alpha, e), new ForAll(variable,e1))), new Entailment(e, new ForAll(variable,e1))))), new Entailment(alpha, new Entailment(new Entailment(e, new Entailment(new And(alpha, e), new ForAll(variable,e1))), new Entailment(e, new ForAll(variable,e1)))))), null);
        proof.addExpression(new Entailment(new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(alpha, new Entailment(e, new And(alpha, e)))), new Entailment(new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(new Entailment(alpha, new Entailment(e, new And(alpha, e))), new Entailment(new Entailment(alpha, new Entailment(new Entailment(e, new And(alpha, e)), new Entailment(new Entailment(e, new Entailment(new And(alpha, e), new ForAll(variable,e1))), new Entailment(e, new ForAll(variable,e1))))), new Entailment(alpha, new Entailment(new Entailment(e, new Entailment(new And(alpha, e), new ForAll(variable,e1))), new Entailment(e, new ForAll(variable,e1))))))), new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(new Entailment(alpha, new Entailment(new Entailment(e, new And(alpha, e)), new Entailment(new Entailment(e, new Entailment(new And(alpha, e), new ForAll(variable,e1))), new Entailment(e, new ForAll(variable,e1))))), new Entailment(alpha, new Entailment(new Entailment(e, new Entailment(new And(alpha, e), new ForAll(variable,e1))), new Entailment(e, new ForAll(variable,e1)))))))), null);
        proof.addExpression(new Entailment(new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(new Entailment(alpha, new Entailment(e, new And(alpha, e))), new Entailment(new Entailment(alpha, new Entailment(new Entailment(e, new And(alpha, e)), new Entailment(new Entailment(e, new Entailment(new And(alpha, e), new ForAll(variable,e1))), new Entailment(e, new ForAll(variable,e1))))), new Entailment(alpha, new Entailment(new Entailment(e, new Entailment(new And(alpha, e), new ForAll(variable,e1))), new Entailment(e, new ForAll(variable,e1))))))), new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(new Entailment(alpha, new Entailment(new Entailment(e, new And(alpha, e)), new Entailment(new Entailment(e, new Entailment(new And(alpha, e), new ForAll(variable,e1))), new Entailment(e, new ForAll(variable,e1))))), new Entailment(alpha, new Entailment(new Entailment(e, new Entailment(new And(alpha, e), new ForAll(variable,e1))), new Entailment(e, new ForAll(variable,e1))))))), null);
        proof.addExpression(new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(new Entailment(alpha, new Entailment(new Entailment(e, new And(alpha, e)), new Entailment(new Entailment(e, new Entailment(new And(alpha, e), new ForAll(variable,e1))), new Entailment(e, new ForAll(variable,e1))))), new Entailment(alpha, new Entailment(new Entailment(e, new Entailment(new And(alpha, e), new ForAll(variable,e1))), new Entailment(e, new ForAll(variable,e1)))))), null);
        proof.addExpression(new Entailment(new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(alpha, new Entailment(e, new And(alpha, e)))), new Entailment(new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(new Entailment(alpha, new Entailment(e, new And(alpha, e))), new Entailment(new Entailment(alpha, new Entailment(new Entailment(e, new And(alpha, e)), new Entailment(new Entailment(e, new Entailment(new And(alpha, e), new ForAll(variable,e1))), new Entailment(e, new ForAll(variable,e1))))), new Entailment(alpha, new Entailment(new Entailment(e, new Entailment(new And(alpha, e), new ForAll(variable,e1))), new Entailment(e, new ForAll(variable,e1))))))), new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(new Entailment(alpha, new Entailment(new Entailment(e, new And(alpha, e)), new Entailment(new Entailment(e, new Entailment(new And(alpha, e), new ForAll(variable,e1))), new Entailment(e, new ForAll(variable,e1))))), new Entailment(alpha, new Entailment(new Entailment(e, new Entailment(new And(alpha, e), new ForAll(variable,e1))), new Entailment(e, new ForAll(variable,e1)))))))), null);
        proof.addExpression(new Entailment(new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(new Entailment(alpha, new Entailment(e, new And(alpha, e))), new Entailment(new Entailment(alpha, new Entailment(new Entailment(e, new And(alpha, e)), new Entailment(new Entailment(e, new Entailment(new And(alpha, e), new ForAll(variable,e1))), new Entailment(e, new ForAll(variable,e1))))), new Entailment(alpha, new Entailment(new Entailment(e, new Entailment(new And(alpha, e), new ForAll(variable,e1))), new Entailment(e, new ForAll(variable,e1))))))), new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(new Entailment(alpha, new Entailment(new Entailment(e, new And(alpha, e)), new Entailment(new Entailment(e, new Entailment(new And(alpha, e), new ForAll(variable,e1))), new Entailment(e, new ForAll(variable,e1))))), new Entailment(alpha, new Entailment(new Entailment(e, new Entailment(new And(alpha, e), new ForAll(variable,e1))), new Entailment(e, new ForAll(variable,e1))))))), null);
        proof.addExpression(new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(new Entailment(alpha, new Entailment(new Entailment(e, new And(alpha, e)), new Entailment(new Entailment(e, new Entailment(new And(alpha, e), new ForAll(variable,e1))), new Entailment(e, new ForAll(variable,e1))))), new Entailment(alpha, new Entailment(new Entailment(e, new Entailment(new And(alpha, e), new ForAll(variable,e1))), new Entailment(e, new ForAll(variable,e1)))))), null);
        proof.addExpression(new Entailment(new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(alpha, new Entailment(new Entailment(e, new And(alpha, e)), new Entailment(new Entailment(e, new Entailment(new And(alpha, e), new ForAll(variable,e1))), new Entailment(e, new ForAll(variable,e1)))))), new Entailment(new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(new Entailment(alpha, new Entailment(new Entailment(e, new And(alpha, e)), new Entailment(new Entailment(e, new Entailment(new And(alpha, e), new ForAll(variable,e1))), new Entailment(e, new ForAll(variable,e1))))), new Entailment(alpha, new Entailment(new Entailment(e, new Entailment(new And(alpha, e), new ForAll(variable,e1))), new Entailment(e, new ForAll(variable,e1)))))), new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(alpha, new Entailment(new Entailment(e, new Entailment(new And(alpha, e), new ForAll(variable,e1))), new Entailment(e, new ForAll(variable,e1))))))), null);
        proof.addExpression(new Entailment(new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(new Entailment(alpha, new Entailment(new Entailment(e, new And(alpha, e)), new Entailment(new Entailment(e, new Entailment(new And(alpha, e), new ForAll(variable,e1))), new Entailment(e, new ForAll(variable,e1))))), new Entailment(alpha, new Entailment(new Entailment(e, new Entailment(new And(alpha, e), new ForAll(variable,e1))), new Entailment(e, new ForAll(variable,e1)))))), new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(alpha, new Entailment(new Entailment(e, new Entailment(new And(alpha, e), new ForAll(variable,e1))), new Entailment(e, new ForAll(variable,e1)))))), null);
        proof.addExpression(new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(alpha, new Entailment(new Entailment(e, new Entailment(new And(alpha, e), new ForAll(variable,e1))), new Entailment(e, new ForAll(variable,e1))))), null);
        proof.addExpression(new Entailment(new Entailment(alpha, new Entailment(e, new Entailment(new And(alpha, e), new ForAll(variable,e1)))), new Entailment(new Entailment(alpha, new Entailment(new Entailment(e, new Entailment(new And(alpha, e), new ForAll(variable,e1))), new Entailment(e, new ForAll(variable,e1)))), new Entailment(alpha, new Entailment(e, new ForAll(variable,e1))))), null);
        proof.addExpression(new Entailment(new Entailment(new Entailment(alpha, new Entailment(e, new Entailment(new And(alpha, e), new ForAll(variable,e1)))), new Entailment(new Entailment(alpha, new Entailment(new Entailment(e, new Entailment(new And(alpha, e), new ForAll(variable,e1))), new Entailment(e, new ForAll(variable,e1)))), new Entailment(alpha, new Entailment(e, new ForAll(variable,e1))))), new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(new Entailment(alpha, new Entailment(e, new Entailment(new And(alpha, e), new ForAll(variable,e1)))), new Entailment(new Entailment(alpha, new Entailment(new Entailment(e, new Entailment(new And(alpha, e), new ForAll(variable,e1))), new Entailment(e, new ForAll(variable,e1)))), new Entailment(alpha, new Entailment(e, new ForAll(variable,e1))))))), null);
        proof.addExpression(new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(new Entailment(alpha, new Entailment(e, new Entailment(new And(alpha, e), new ForAll(variable,e1)))), new Entailment(new Entailment(alpha, new Entailment(new Entailment(e, new Entailment(new And(alpha, e), new ForAll(variable,e1))), new Entailment(e, new ForAll(variable,e1)))), new Entailment(alpha, new Entailment(e, new ForAll(variable,e1)))))), null);
        proof.addExpression(new Entailment(new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(alpha, new Entailment(e, new Entailment(new And(alpha, e), new ForAll(variable,e1))))), new Entailment(new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(new Entailment(alpha, new Entailment(e, new Entailment(new And(alpha, e), new ForAll(variable,e1)))), new Entailment(new Entailment(alpha, new Entailment(new Entailment(e, new Entailment(new And(alpha, e), new ForAll(variable,e1))), new Entailment(e, new ForAll(variable,e1)))), new Entailment(alpha, new Entailment(e, new ForAll(variable,e1)))))), new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(new Entailment(alpha, new Entailment(new Entailment(e, new Entailment(new And(alpha, e), new ForAll(variable,e1))), new Entailment(e, new ForAll(variable,e1)))), new Entailment(alpha, new Entailment(e, new ForAll(variable,e1))))))), null);
        proof.addExpression(new Entailment(new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(new Entailment(alpha, new Entailment(e, new Entailment(new And(alpha, e), new ForAll(variable,e1)))), new Entailment(new Entailment(alpha, new Entailment(new Entailment(e, new Entailment(new And(alpha, e), new ForAll(variable,e1))), new Entailment(e, new ForAll(variable,e1)))), new Entailment(alpha, new Entailment(e, new ForAll(variable,e1)))))), new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(new Entailment(alpha, new Entailment(new Entailment(e, new Entailment(new And(alpha, e), new ForAll(variable,e1))), new Entailment(e, new ForAll(variable,e1)))), new Entailment(alpha, new Entailment(e, new ForAll(variable,e1)))))), null);
        proof.addExpression(new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(new Entailment(alpha, new Entailment(new Entailment(e, new Entailment(new And(alpha, e), new ForAll(variable,e1))), new Entailment(e, new ForAll(variable,e1)))), new Entailment(alpha, new Entailment(e, new ForAll(variable,e1))))), null);
        proof.addExpression(new Entailment(new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(alpha, new Entailment(new Entailment(e, new Entailment(new And(alpha, e), new ForAll(variable,e1))), new Entailment(e, new ForAll(variable,e1))))), new Entailment(new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(new Entailment(alpha, new Entailment(new Entailment(e, new Entailment(new And(alpha, e), new ForAll(variable,e1))), new Entailment(e, new ForAll(variable,e1)))), new Entailment(alpha, new Entailment(e, new ForAll(variable,e1))))), new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(alpha, new Entailment(e, new ForAll(variable,e1)))))), null);
        proof.addExpression(new Entailment(new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(new Entailment(alpha, new Entailment(new Entailment(e, new Entailment(new And(alpha, e), new ForAll(variable,e1))), new Entailment(e, new ForAll(variable,e1)))), new Entailment(alpha, new Entailment(e, new ForAll(variable,e1))))), new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(alpha, new Entailment(e, new ForAll(variable,e1))))), null);
        proof.addExpression(new Entailment(new Entailment(new And(alpha, e), new ForAll(variable,e1)), new Entailment(alpha, new Entailment(e, new ForAll(variable,e1)))), null);
        proof.addExpression(new Entailment(alpha, new Entailment(e, new ForAll(variable,e1))), null);
    }
}
